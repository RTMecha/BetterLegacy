{
  "tooltip_groups": [
    // Toolbar
    [
      {
        "name": "Time Input",
        "tooltips": [
          {
            "desc": "The precise time of the song shown in seconds.",
            "hint": "Scroll or type in it to change the time.",
            "lang": 0
          }
        ]
      }, // Time Input
      {
        "name": "Pitch",
        "tooltips": [
          {
            "desc": "The playback speed of the level.",
            "hint": "This can be used for seeing animations at slow motion to get a better look at them.",
            "lang": 0
          }
        ]
      }, // Pitch
      {
        "name": "Editor Layer",
        "tooltips": [
          {
            "desc": "Which layer of the editor timeline you're viewing.",
            "hint": "Scroll on the input field to quickly change between layers or type a number in it to go to that layer. You can also click on the scrollwheel while hovering over it to show a list of layers that have objects.",
            "keys": [
              "Scrollwheel"
            ],
            "lang": 0
          },
          {
            "desc": "<font=Angsana>Which of the seven seas of me treasure ye be lookin' at.",
            "hint": "Roll down ye barrel of rum for embarking down the many realms of the 7 seas. Shoot ye firearm at ye barrel of rum to unleash the booty.",
            "keys": [
              "Barrel"
            ],
            "lang": 5
          }
        ]
      } // Editor Layer
    ],

    // Level Panel
    [
      {
        "name": "Level Panel",
        "tooltips": [
          {
            "desc": "A level from your editor folder.",
            "hint": "Left click to open the level and right click to show the context menu.",
            "lang": 0
          }
        ]
      }, // Level Panel
      {
        "name": "Level Panel Open",
        "tooltips": [
          {
            "desc": "Opens the level in the editor.",
            "hint": "Left click to open the level.",
            "lang": 0
          }
        ]
      }, // Level Panel Open
      {
        "name": "Level Panel Show Autosaves",
        "tooltips": [
          {
            "desc": "Opens the level autosaves / backups list.",
            "hint": "Left click to open the autosaves / backups list, where you can select a file to open it in the editor or change from autosave to backup or back.",
            "lang": 0
          }
        ]
      }, // Level Panel Show Autosaves
      {
        "name": "Level Panel Open Folder",
        "tooltips": [
          {
            "desc": "Selects the editor folder.",
            "hint": "Left click to open this folder and set it as the current editor folder your levels are loaded from.",
            "lang": 0
          }
        ]
      }, // Level Panel Open Folder
      {
        "name": "Level Panel Create Folder",
        "tooltips": [
          {
            "desc": "Creates a new folder.",
            "hint": "Left click to open the Folder Creator. The new folder will end up in the current editor folder.",
            "lang": 0
          }
        ]
      }, // Level Panel Create Folder
      {
        "name": "Level Panel Create Template",
        "tooltips": [
          {
            "desc": "Creates a new level template.",
            "hint": "Left click to open the Level Template Editor.",
            "lang": 0
          }
        ]
      }, // Level Panel Create Template
      {
        "name": "Level Panel Create Level",
        "tooltips": [
          {
            "desc": "Creates a new level.",
            "hint": "Left click to open the New Level Creator.",
            "lang": 0
          }
        ]
      }, // Level Panel Create Level
      {
        "name": "Level Panel Create Backup",
        "tooltips": [
          {
            "desc": "Creates a backup of the level.",
            "hint": "Left click to save a backup. You can access it by going to Show Autosaves.",
            "lang": 0
          }
        ]
      }, // Level Panel Create Backup
      {
        "name": "Level Panel Rename Folder",
        "tooltips": [
          {
            "desc": "Renames the folder.",
            "hint": "Left click to open the Folder Renamer.",
            "lang": 0
          }
        ]
      }, // Level Panel Rename Folder
      {
        "name": "Level Panel Rename Level",
        "tooltips": [
          {
            "desc": "Renames the level.",
            "hint": "Left click to open the Level Renamer. Renaming the level will rename both the folder of the level and the level name itself.",
            "lang": 0
          }
        ]
      }, // Level Panel Rename Level
      {
        "name": "Level Panel Cut",
        "tooltips": [
          {
            "desc": "Cuts the level.",
            "hint": "When the level is pasted, it will be moved to the new location instead of being duplicated.",
            "lang": 0
          }
        ]
      }, // Level Panel Cut
      {
        "name": "Level Panel Copy",
        "tooltips": [
          {
            "desc": "Copies the level.",
            "hint": "When the level is pasted, it will be duplicated. If the level already exists in the current editor folder, the level folder will be renamed.",
            "lang": 0
          }
        ]
      }, // Level Panel Copy
      {
        "name": "Level Panel Paste",
        "tooltips": [
          {
            "desc": "Pastes the copied level.",
            "hint": "If you have copied / cut a level, left click to paste it into the current editor folder.",
            "lang": 0
          }
        ]
      }, // Level Panel Paste
      {
        "name": "Level Panel Delete",
        "tooltips": [
          {
            "desc": "Deletes the level.",
            "hint": "Permenantly deletes the level. Only do this if you're 100% sure you want to delete it. Always make sure you have backups!",
            "lang": 0
          }
        ]
      }, // Level Panel Delete
      {
        "name": "Level Panel ZIP",
        "tooltips": [
          {
            "desc": "ZIP the folders' contents into a .zip file.",
            "hint": "Creates a .zip file and copies the contents of the folder into it.",
            "lang": 0
          }
        ]
      }, // Level Panel ZIP
      {
        "name": "Level Panel Copy Folder",
        "tooltips": [
          {
            "desc": "Copies the path of the folder.",
            "hint": "Takes the full path to the level / folder and puts it onto your clipboard.",
            "lang": 0
          }
        ]
      }, // Level Panel Copy Folder
      {
        "name": "Level Panel Open Explorer",
        "tooltips": [
          {
            "desc": "Opens the folder in file explorer.",
            "hint": "Starts the local file explorer and opens the folder in it.",
            "lang": 0
          }
        ]
      }, // Level Panel Open Explorer
      {
        "name": "Level List Open Explorer",
        "tooltips": [
          {
            "desc": "Opens the current editor folder in file explorer.",
            "hint": "Starts the local file explorer and opens the current editor folder in it.",
            "lang": 0
          }
        ]
      }, // Level List Open Explorer
      {
        "name": "Autosave Toggle Backup State",
        "tooltips": [
          {
            "desc": "Toggles if the file is an autosave or a backup.",
            "hint": "Autosaves are automatically deleted if the files reach the autosave cap, whereas backups are not deleted.",
            "lang": 0
          }
        ]
      } // Autosave Toggle Backup State
    ],

    // MetaData
    [
      {
        "name": "Copy Arcade ID",
        "tooltips": [
          {
            "desc": "Copies the Arcade ID of the level.",
            "hint": "Takes the Arcade ID of the level and puts it onto your clipboard.",
            "lang": 0
          }
        ]
      }, // Copy Arcade ID
      {
        "name": "Copy Server ID",
        "tooltips": [
          {
            "desc": "Copies the Server ID of the level.",
            "hint": "If the level was uploaded, takes the Server ID of the level and puts it onto your clipboard.",
            "lang": 0
          }
        ]
      }, // Copy Server ID
      {
        "name": "Convert Level VG",
        "tooltips": [
          {
            "desc": "Converts the level to the VG format.",
            "hint": "The VG format is the format modern versions of <b>Project Arrhythmia</b> use.",
            "lang": 0
          }
        ]
      }, // Convert Level VG
      {
        "name": "Convert Level LS",
        "tooltips": [
          {
            "desc": "Converts the level to the LS format.",
            "hint": "The LS format is the format Legacy versions of <b>Project Arrhythmia</b> use.",
            "lang": 0
          }
        ]
      }, // Convert Level LS

      {
        "name": "Require Version",
        "tooltips": [
          {
            "desc": "Players will need to play the level in a specific version of BetterLegacy.",
            "hint": "This is for cases where a level was made in a version with specific features that either work differently in other versions or don't exist anymore.",
            "lang": 0
          }
        ]
      }, // Require Version
      {
        "name": "Version Comparison",
        "tooltips": [
          {
            "desc": "If <i>Require Version</i> is on, then this specifies how the levels' version should be compared to the games' version.",
            "hint": "<b>Less Than</b>: Level is only playable before and in the version the level was saved in. This is for cases where there's a removed feature or something has changed significantly.<br><b>Equal To</b>: Level is only playable in a specific version. Just in case a feature only exists in this version, for whatever reason.<br><b>Greater Than</b>: Level is only playable after and in the version the level was saved in. This is for newer features that don't exist in older versions.",
            "lang": 0
          }
        ]
      }, // Require Version
      {
        "name": "Upload Level",
        "tooltips": [
          {
            "desc": "Upload a level to the custom arcade server.",
            "hint": "If you aren't already logged in, you will be requested to do so before uploading again.",
            "lang": 0
          }
        ]
      } // Upload Level
    ],

    // Beatmap Objects
    [
      {
        "name": "Object Type",
        "tooltips": [
          {
            "desc": "The physical behavior of the object.",
            "hint": "<b>Normal</b>: Damages the player and is opaque by default.\n<b>Helper</b>: Does not damage the player and has 0.35 opacity. Recommended for warning attacks.\n<b>Decoration</b>: Does not damage the player.\n<b>Empty</b>: Does not spawn any visual object. Recommended for parenting.\n<b>Solid</b>: Does not allow the player to pass through it.",
            "lang": 0
          }
        ]
      }, // Object Type
      {
        "name": "Autokill Type",
        "tooltips": [
          {
            "desc": "The despawn behavior of the object.",
            "hint": "<b>No Autokill</b>: Object does not despawn. Recommended for persistent objects.\n<b>Last Keyframe</b>: Despawns as soon as the objects' animation is finished.\n<b>Last Keyframe Offset</b>: Despawns at an offset from the end of the objects' animation.\n<b>Fixed Time</b>: Despawns at a specific time from the start time, regardless of keyframes.\n<b>Song Time</b>: Despawns at song time, regardless of start time.",
            "lang": 0
          }
        ]
      } // Autokill Type
    ],

    // Prefabs
    [
      {
        "name": "External Prefab List Button",
        "tooltips": [
          {
            "desc": "A prefab from your prefabs folder.",
            "hint": "Left click to open the External Prefab window, or if your Import Prefabs Directly setting is on, to import the prefab directly into your level. You can also right click to show the context menu for External Prefabs.",
            "lang": 0
          }
        ]
      }, // External Prefab List Button
      {
        "name": "Internal Prefab List Button",
        "tooltips": [
          {
            "desc": "A prefab from the level itself.",
            "hint": "Left click to add the Prefab to the level as a Prefab Object. You can also assign this as a Quick Prefab by selecting the Quick Prefab button below and selecting this Prefab.",
            "lang": 0
          }
        ]
      }, // Internal Prefab List Button

      {
        "name": "Internal Prefab Export",
        "tooltips": [
          {
            "desc": "Exports an internal prefab to your prefabs folder.",
            "hint": "The prefab gets exported and saved to the current prefabs folder.",
            "lang": 0
          }
        ]
      } // Internal Prefab Export
    ],

    // Prefab Objects
    [
      {
        "name": "Prefab Object Autokill Type",
        "tooltips": [
          {
            "desc": "The despawn behavior of the Prefab Object. Objects that despawn before the despawn point of the Prefab Object are not affected.",
            "hint": "<b>Regular</b>: Does not change the autokill behavior of any spawned objects.\n<b>Start Time</b>: Objects alive past a specific time from the start time will despawn.\n<b>Song Time</b>: Objects alive past a specific time will despawn.",
            "lang": 0
          }
        ]
      }, // Prefab Object Autokill Type
      {
        "name": "Copy Prefab Instance Data",
        "tooltips": [
          {
            "desc": "Copies the currently selected Prefab Objects' data.",
            "hint": "Imported Prefabs will have the copied data pasted to it automatically.",
            "lang": 0
          }
        ]
      }, // Copy Prefab Instance Data
      {
        "name": "Paste Prefab Instance Data",
        "tooltips": [
          {
            "desc": "Pastes the copied instance data to the currently selected Prefab Object.",
            "hint": "Imported Prefabs will have the copied data pasted to it automatically.",
            "lang": 0
          }
        ]
      }, // Copy Prefab Instance Data
      {
        "name": "Remove Prefab Instance Data",
        "tooltips": [
          {
            "desc": "Removes the copied instance data.",
            "hint": "Imported Prefabs will have the copied data pasted to it automatically. Removing the copied data will stop this.",
            "lang": 0
          }
        ]
      } // Remove Prefab Instance Data
    ],

    // Beatmap Themes
    [
      {
        "name": "External Theme List Button",
        "tooltips": [
          {
            "desc": "A theme from your themes folder.",
            "hint": "Left click to import the theme into the level. You can also right click to show the context menu for External Themes.",
            "lang": 0
          }
        ]
      }, // External Theme List Button
      {
        "name": "Internal Theme List Button",
        "tooltips": [
          {
            "desc": "A theme from the level.",
            "hint": "Left click to use the theme on the selected keyframe. You can also right click to show the context menu for Internal Themes.",
            "lang": 0
          }
        ]
      }, // Internal Theme List Button

      {
        "name": "External Theme Import",
        "tooltips": [
          {
            "desc": "Imports an external theme into the level.",
            "hint": "The theme will be saved and used in the level file.",
            "lang": 0
          }
        ]
      }, // External Theme Import
      {
        "name": "External Theme Update",
        "tooltips": [
          {
            "desc": "Finds a theme with the same ID in the level and overwrites it.",
            "hint": "The theme will be saved and used in the level file. Does not import the theme if no theme was found.",
            "lang": 0
          }
        ]
      }, // External Theme Update
      {
        "name": "Internal Theme Export",
        "tooltips": [
          {
            "desc": "Exports an internal theme to your themes folder.",
            "hint": "The theme gets exported and saved to the current themes folder.",
            "lang": 0
          }
        ]
      }, // Internal Theme Export

      {
        "name": "Internal Remove Unused Themes",
        "tooltips": [
          {
            "desc": "Removes all themes that aren't used by any theme keyframes from the level.",
            "hint": "Themes that are unused will be removed.",
            "lang": 0
          }
        ]
      } // Internal Remove Unused Themes
    ],

    // Lists
    [
      {
        "name": "Level Sort Dropdown",
        "tooltips": [
          {
            "desc": "The order the level panels appear in.",
            "hint": "<b>Cover</b> Sort by if level has a set cover. (Default)<br><b>Artist</b> Sort by song artist.<br><b>Creator</b> Sort by level creator.<br><b>Folder</b> Sort by level folder name.<br><b>Title</b> Sort by song title.<br><b>Difficulty</b> Sort by level difficulty.<br><b>Date Edited</b> Sort by date edited.<br><b>Date Created</b> Sort by date created.",
            "lang": 0
          }
        ]
      }, // Level Sort Dropdown
      {
        "name": "Level Ascend Toggle",
        "tooltips": [
          {
            "desc": "If level sort should ascend.",
            "hint": "Left click to toggle. If on, the level sort will ascend.",
            "lang": 0
          }
        ]
      }, // Level Ascend Toggle
      {
        "name": "Editor Path",
        "tooltips": [
          {
            "desc": "The editor directory in your beatmaps folder.",
            "hint": "Type in the field to change where your levels are loaded from. Right click the field to open a quick folder selection.",
            "lang": 0
          }
        ]
      }, // Editor Path
      {
        "name": "Prefab Path",
        "tooltips": [
          {
            "desc": "The prefabs directory in your beatmaps folder.",
            "hint": "Type in the field to change where your prefabs are loaded from. Right click the field to open a quick folder selection.",
            "lang": 0
          }
        ]
      }, // Prefab Path
      {
        "name": "Prefab Default Path",
        "tooltips": [
          {
            "desc": "The prefab folder that gets loaded whenever you enter this level.",
            "hint": "If the levels' default prefab folder was not set, then it'll keep the currently set folder. This is for QOL changing of prefab lists for different levels.",
            "lang": 0
          }
        ]
      }, // Prefab Default Path
      {
        "name": "Theme Path",
        "tooltips": [
          {
            "desc": "The themes directory in your beatmaps folder.",
            "hint": "Type in the field to change where your themes are loaded from. Right click the field to open a quick folder selection.",
            "lang": 0
          }
        ]
      }, // Theme Path
      {
        "name": "Theme Default Path",
        "tooltips": [
          {
            "desc": "The theme folder that gets loaded whenever you enter this level.",
            "hint": "If the levels' default theme folder was not set, then it'll keep the currently set folder. This is for QOL changing of themes for different levels.",
            "lang": 0
          }
        ]
      } // Theme Default Path
    ],

    // Animations
    [
      {
        "name": "Animation Reference ID",
        "tooltips": [
          {
            "desc": "Runs the animation when the associated action occurs.",
            "hint": "When an action runs, it searches for animations with a specific reference ID and plays it (e.g. reference ID is set to boost and the player boosts, the animation will play). This can be right clicked to show the list of default references.",
            "lang": 0
          }
        ]
      }, // Animation Reference ID
      {
        "name": "Animation Transition",
        "tooltips": [
          {
            "desc": "If the first keyframes of the animation should use the current objects' values instead of the keyframes.",
            "hint": "First keyframes will be replaced at runtime with the position, scale, etc. values of the object.",
            "lang": 0
          }
        ]
      } // Animation Transition
    ],

    // Modifiers
    [
      {
        "name": "Show Modifiers",
        "tooltips": [
          {
            "desc": "Shows the objects' modifiers.",
            "hint": "Left click to expand the object modifiers list.",
            "lang": 0
          }
        ]
      }, // Show Modifiers
      {
        "name": "Modifiers Order Matters",
        "tooltips": [
          {
            "desc": "If the order of the modifiers matters.",
            "hint": "With Order Matters off, all action modifiers require all trigger modifiers to be triggered With it on, action modifiers only care about triggers before itself and not before other actions. This can be good for simplifying your levels' modifier setup.",
            "lang": 0
          }
        ]
      }, // Modifiers Order Matters
      {
        "name": "Modifiers Ignore Lifespan",
        "tooltips": [
          {
            "desc": "If the modifiers in the object can activate regardless of the objects' lifespan.",
            "hint": "With Ignore Lifespan off, modifiers will only activate / trigger when the object spawns.",
            "lang": 0
          }
        ]
      }, // Modifiers Ignore Lifespan
      {
        "name": "Modifiers Integer Variable",
        "tooltips": [
          {
            "desc": "Objects store a single number that can be referenced by other objects or by itself.",
            "hint": "This can be used by several modifiers that can check the objects' variable. Useful for in-game selection systems.",
            "lang": 0
          }
        ]
      }, // Modifiers Integer Variable
      {
        "name": "Add Modifier",
        "tooltips": [
          {
            "desc": "Add a modifier",
            "hint": "Opens the modifier list where you can choose a modifier to add to the object.",
            "lang": 0
          }
        ]
      }, // Add Modifier
      {
        "name": "Paste Modifier",
        "tooltips": [
          {
            "desc": "Pastes the copied modifier",
            "hint": "If a modifier was copied, this pastes it to the current object.",
            "lang": 0
          }
        ]
      }, // Paste Modifier
      {
        "name": "Delete Modifier",
        "tooltips": [
          {
            "desc": "Deletes the modifier from the object",
            "hint": "Removes the modifier and triggers its inactive state.",
            "lang": 0
          }
        ]
      }, // Delete Modifier
      {
        "name": "Collapse Modifier",
        "tooltips": [
          {
            "desc": "Collapse the modifier block",
            "hint": "Shortens the modifier to just the name and main settings.",
            "lang": 0
          }
        ]
      }, // Collapse Modifier
      {
        "name": "Copy Modifier",
        "tooltips": [
          {
            "desc": "Copies the modifier",
            "hint": "This allows you to have a copy of the modifier with the exact values. Once you copy the modifier, a \"Paste\" button will appear.",
            "lang": 0
          }
        ]
      }, // Copy Modifier
      {
        "name": "Constant Modifier",
        "tooltips": [
          {
            "desc": "Modifier runs per frame",
            "hint": "With this on, the modifier runs every frame, otherwise the modifier runs only once.",
            "lang": 0
          }
        ]
      }, // Constant Modifier
      {
        "name": "Run Count Modifier",
        "tooltips": [
          {
            "desc": "Modifier runs a set amount of times",
            "hint": "With this on, the modifier will only run a set amount of times. If the count is 0, it will continue running.",
            "lang": 0
          }
        ]
      }, // Constant Modifier
      {
        "name": "Trigger Else If Modifier",
        "tooltips": [
          {
            "desc": "Trigger runs if previous triggers weren't active.",
            "hint": "Makes the trigger an \"Or Gate\".",
            "lang": 0
          }
        ]
      }, // Trigger Else If Modifier
      {
        "name": "Trigger Not Modifier",
        "tooltips": [
          {
            "desc": "Trigger runs if the result is the opposite.",
            "hint": "Makes the trigger a \"Not Gate\".",
            "lang": 0
          }
        ]
      }, // Trigger Not Modifier
      {
        "name": "Prefab Instance Group Modifier",
        "tooltips": [
          {
            "desc": "If the modifier should only search for objects that have the same prefab instance reference. Includes both spawned and expanded objects.",
            "hint": "Searches for prefab instance objects.",
            "lang": 0
          }
        ]
      }, // Prefab Instance Group Modifier
      {
        "name": "Group Alive Modifier",
        "tooltips": [
          {
            "desc": "If the modifier should search for objects that are currently alive.",
            "hint": "Searches for alive objects.",
            "lang": 0
          }
        ]
      }, // Group Alive Modifier
      {
        "name": "Sub Prefab Modifier",
        "tooltips": [
          {
            "desc": "If the modifier should search for objects spawned from the prefab.",
            "hint": "Searches the spawned prefab.",
            "lang": 0
          }
        ]
      }, // Sub Prefab Modifier
      {
        "name": "Notifier Modifier",
        "tooltips": [
          {
            "desc": "Lights up when the modifier is running.",
            "hint": "If the modifier is running, the notifier will light up.",
            "lang": 0
          }
        ]
      }, // Notifier Modifier

      // List
      [
        {
          "name": "Object Modifier - break (Trigger)",
          "tooltips": [
            {
              "desc": "break (Trigger)",
              "hint": "Breaks the current trigger check.",
              "lang": 0
            }
          ]
        }, // break
        {
          "name": "Object Modifier - disableModifier (Trigger)",
          "tooltips": [
            {
              "desc": "disableModifier (Trigger)",
              "hint": "Prevents all modifiers from running. Useful for debugging.",
              "lang": 0
            }
          ]
        }, // disableModifier
        {
          "name": "Object Modifier - resetLoop (Action)",
          "tooltips": [
            {
              "desc": "resetLoop (Action)",
              "hint": "Allows all modifiers to re-activate.",
              "lang": 0
            }
          ]
        }, // resetLoop
        {
          "name": "Object Modifier - forLoop (Action)",
          "tooltips": [
            {
              "desc": "forLoop (Action)",
              "hint": "Runs the next sequence of modifiers a set amount of times, with an index variable passed to each sequence. The 'return' modifier can be used to stop the loop or skip it entirely if triggers before the forLoop modifiers weren't triggered.",
              "lang": 0
            }
          ]
        }, // forLoop
        {
          "name": "Object Modifier - continue (Action)",
          "tooltips": [
            {
              "desc": "continue (Action)",
              "hint": "Continues to the next modifier loop.",
              "lang": 0
            }
          ]
        }, // continue
        {
          "name": "Object Modifier - return (Action)",
          "tooltips": [
            {
              "desc": "return (Action)",
              "hint": "Stops the modifier loop from continuing.",
              "lang": 0
            }
          ]
        }, // return
        {
          "name": "Object Modifier - await (Trigger)",
          "tooltips": [
            {
              "desc": "await (Trigger)",
              "hint": "Trigger is active after a specified amount of time.",
              "lang": 0
            }
          ]
        }, // await
        {
          "name": "Object Modifier - awaitCounter (Trigger)",
          "tooltips": [
            {
              "desc": "awaitCounter (Trigger)",
              "hint": "Trigger is active after a set counter exceeds the range.",
              "lang": 0
            }
          ]
        }, // awaitCounter
        //{
        //  "name": "Object Modifier - else (Trigger)",
        //  "tooltips": [
        //    {
        //      "desc": "else (Trigger)",
        //      "hint": "If the modifier is in a set of triggers, invert the current trigger check. Otherwise if the trigger is after a set of action modifiers, the next set of action modifiers will only run if the previous triggers weren't triggered.",
        //      "lang": 0
        //    }
        //  ]
        //}, // else
        {
          "name": "Object Modifier - else (Trigger)",
          "tooltips": [
            {
              "desc": "else (Trigger)",
              "hint": "Inverts the current trigger check (True becomes False, False becomes True).",
              "lang": 0
            }
          ]
        }, // else
        {
          "name": "Object Modifier - comment (Action)",
          "tooltips": [
            {
              "desc": "comment (Action)",
              "hint": "Gives a brief description on a set of modifiers.",
              "lang": 0
            }
          ]
        }, // comment

        // Variable
        [
          {
            "name": "Object Modifier - getToggle (Action)",
            "tooltips": [
              {
                "desc": "getToggle (Action)",
                "hint": "Gets a toggle value and passes it to other modifiers.",
                "lang": 0
              }
            ]
          }, // getToggle
          {
            "name": "Object Modifier - getFloat (Action)",
            "tooltips": [
              {
                "desc": "getFloat (Action)",
                "hint": "Gets a float value and passes it to other modifiers.",
                "lang": 0
              }
            ]
          }, // getFloat
          {
            "name": "Object Modifier - getInt (Action)",
            "tooltips": [
              {
                "desc": "getInt (Action)",
                "hint": "Gets an int value and passes it to other modifiers.",
                "lang": 0
              }
            ]
          }, // getInt
          {
            "name": "Object Modifier - getString (Action)",
            "tooltips": [
              {
                "desc": "getString (Action)",
                "hint": "Gets a string (text) value and passes it to other modifiers.",
                "lang": 0
              }
            ]
          }, // getString
          {
            "name": "Object Modifier - getStringLower (Action)",
            "tooltips": [
              {
                "desc": "getStringLower (Action)",
                "hint": "Gets a string (text) value, converts it to lowercase and passes it to other modifiers.",
                "lang": 0
              }
            ]
          }, // getStringLower
          {
            "name": "Object Modifier - getStringUpper (Action)",
            "tooltips": [
              {
                "desc": "getStringUpper (Action)",
                "hint": "Gets a string (text) value, converts it to uppercase and passes it to other modifiers.",
                "lang": 0
              }
            ]
          }, // getStringUpper
          {
            "name": "Object Modifier - getEnum (Action)",
            "tooltips": [
              {
                "desc": "getEnum (Action)",
                "hint": "Gets a custom enum value and passes it to other modifiers. You can edit the enum values.",
                "lang": 0
              }
            ]
          }, // getEnum
          {
            "name": "Object Modifier - getEventValue (Action)",
            "tooltips": [
              {
                "desc": "getEventValue (Action)",
                "hint": "Gets an interpolated event value and passes it to other modifiers.",
                "lang": 0
              }
            ]
          }, // getEventValue
          {
            "name": "Object Modifier - getSample (Action)",
            "tooltips": [
              {
                "desc": "getSample (Action)",
                "hint": "Gets an audio sample value and passes it to other modifiers.",
                "lang": 0
              }
            ]
          }, // getSample
          {
            "name": "Object Modifier - getText (Action)",
            "tooltips": [
              {
                "desc": "getText (Action)",
                "hint": "Gets the objects' text value and passes it to other modifiers.",
                "lang": 0
              }
            ]
          }, // getText
          {
            "name": "Object Modifier - getTextOther (Action)",
            "tooltips": [
              {
                "desc": "getTextOther (Action)",
                "hint": "Gets another objects' text value and passes it to other modifiers.",
                "lang": 0
              }
            ]
          }, // getTextOther
          {
            "name": "Object Modifier - getCurrentKey (Action)",
            "tooltips": [
              {
                "desc": "getCurrentKey (Action)",
                "hint": "Gets the currently held key and passes it to other modifiers.",
                "lang": 0
              }
            ]
          }, // getCurrentKey
          {
            "name": "Object Modifier - getJSONString (Action)",
            "tooltips": [
              {
                "desc": "getJSONString (Action)",
                "hint": "Gets a string value from a saved JSON file in the profiles folder and passes it to other modifiers.",
                "lang": 0
              }
            ]
          }, // getJSONString
          {
            "name": "Object Modifier - getJSONFloat (Action)",
            "tooltips": [
              {
                "desc": "getJSONFloat (Action)",
                "hint": "Gets a float value from a saved JSON file in the profiles folder and passes it to other modifiers.",
                "lang": 0
              }
            ]
          }, // getJSONFloat
          {
            "name": "Object Modifier - getJSON (Action)",
            "tooltips": [
              {
                "desc": "getJSON (Action)",
                "hint": "Gets a JSON value and passes it to other modifiers.",
                "lang": 0
              }
            ]
          }, // getJSON
          {
            "name": "Object Modifier - getSubString (Action)",
            "tooltips": [
              {
                "desc": "getSubString (Action)",
                "hint": "Gets the substring of a string (text) value and passes it to other modifiers.",
                "lang": 0
              }
            ]
          }, // getSubString
          {
            "name": "Object Modifier - getSplitString (Action)",
            "tooltips": [
              {
                "desc": "getSplitString (Action)",
                "hint": "Gets a string (text) value, splits it by a specified character and passes it to other modifiers.",
                "lang": 0
              }
            ]
          }, // getSplitString
          {
            "name": "Object Modifier - getSplitStringAt (Action)",
            "tooltips": [
              {
                "desc": "getSplitStringAt (Action)",
                "hint": "Gets a string (text) value, splits it by a specified character, gets a specific value at an index and passes it to other modifiers.",
                "lang": 0
              }
            ]
          }, // getSplitStringAt
          {
            "name": "Object Modifier - getSplitStringCount (Action)",
            "tooltips": [
              {
                "desc": "getSplitStringCount (Action)",
                "hint": "Gets a string (text) value, splits it by a specified character, gets the amount of splits and passes it to other modifiers.",
                "lang": 0
              }
            ]
          }, // getSplitStringCount
          {
            "name": "Object Modifier - getStringLength (Action)",
            "tooltips": [
              {
                "desc": "getStringLength (Action)",
                "hint": "Gets the length of a string (text) value and passes it to other modifiers.",
                "lang": 0
              }
            ]
          }, // getStringLength
          {
            "name": "Object Modifier - getRegex (Action)",
            "tooltips": [
              {
                "desc": "getRegex (Action)",
                "hint": "Gets a regex match and passes it to other modifiers. Each match group can be assigned to a variable, including the whole match.",
                "lang": 0
              }
            ]
          }, // getRegex
          {
            "name": "Object Modifier - getFormatVariable (Action)",
            "tooltips": [
              {
                "desc": "getRegex (Action)",
                "hint": "Gets a formatted string and passes it to other modifiers.",
                "lang": 0
              }
            ]
          }, // getFormatVariable
          {
            "name": "Object Modifier - getComparison (Action)",
            "tooltips": [
              {
                "desc": "getComparison (Action)",
                "hint": "Gets a true or false value if two text values match and passes it to other modifiers.",
                "lang": 0
              }
            ]
          }, // getComparison
          {
            "name": "Object Modifier - getComparisonMath (Action)",
            "tooltips": [
              {
                "desc": "getComparisonMath (Action)",
                "hint": "Gets a true or false value if two evaluated math values match and passes it to other modifiers.",
                "lang": 0
              }
            ]
          }, // getComparisonMath
          {
            "name": "Object Modifier - getEditorBin (Action)",
            "tooltips": [
              {
                "desc": "getEditorBin (Action)",
                "hint": "Gets the objects' editor bin value and passes it to other modifiers.",
                "lang": 0
              }
            ]
          }, // getEditorBin
          {
            "name": "Object Modifier - getEditorLayer (Action)",
            "tooltips": [
              {
                "desc": "getEditorLayer (Action)",
                "hint": "Gets the objects' editor layer value and passes it to other modifiers.",
                "lang": 0
              }
            ]
          }, // getEditorLayer
          {
            "name": "Object Modifier - getObjectName (Action)",
            "tooltips": [
              {
                "desc": "getObjectName (Action)",
                "hint": "Gets the objects' name value and passes it to other modifiers.",
                "lang": 0
              }
            ]
          }, // getObjectName
          {
            "name": "Object Modifier - getSignaledVariables (Action)",
            "tooltips": [
              {
                "desc": "getSignaledVariables (Action)",
                "hint": "Gets variables sent to this modifier via signalLocalVariables and passes it to other modifiers.",
                "lang": 0
              }
            ]
          }, // getSignaledVariables
          {
            "name": "Object Modifier - signalLocalVariables (Action)",
            "tooltips": [
              {
                "desc": "signalLocalVariables (Action)",
                "hint": "Sends the current variables to a group of objects.",
                "lang": 0
              }
            ]
          }, // signalLocalVariables
          {
            "name": "Object Modifier - clearLocalVariables (Action)",
            "tooltips": [
              {
                "desc": "clearLocalVariables (Action)",
                "hint": "Clears the current stored variables from the modifier runtime.",
                "lang": 0
              }
            ]
          }, // clearLocalVariables
          {
            "name": "Object Modifier - storeLocalVariables (Action)",
            "tooltips": [
              {
                "desc": "storeLocalVariables (Action)",
                "hint": "Stores the current variables to this modifier and passes them after modifier activation. Good for cases where you only want to get a variable once.",
                "lang": 0
              }
            ]
          }, // storeLocalVariables

          {
            "name": "Object Modifier - localVariableEquals (Trigger)",
            "tooltips": [
              {
                "desc": "localVariableEquals (Trigger)",
                "hint": "Trigger is active if a local modifier variable is equal to the modifier value.",
                "lang": 0
              }
            ]
          }, // localVariableEquals
          {
            "name": "Object Modifier - localVariableLesserEquals (Trigger)",
            "tooltips": [
              {
                "desc": "localVariableLesserEquals (Trigger)",
                "hint": "Trigger is active if a local modifier variable is equal to or lesser than the modifier value.",
                "lang": 0
              }
            ]
          }, // localVariableLesserEquals
          {
            "name": "Object Modifier - localVariableGreaterEquals (Trigger)",
            "tooltips": [
              {
                "desc": "localVariableGreaterEquals (Trigger)",
                "hint": "Trigger is active if a local modifier variable is equal to or greater than the modifier value.",
                "lang": 0
              }
            ]
          }, // localVariableGreaterEquals
          {
            "name": "Object Modifier - localVariableLesser (Trigger)",
            "tooltips": [
              {
                "desc": "localVariableLesser (Trigger)",
                "hint": "Trigger is active if a local modifier variable is lesser than the modifier value.",
                "lang": 0
              }
            ]
          }, // localVariableLesser
          {
            "name": "Object Modifier - localVariableGreater (Trigger)",
            "tooltips": [
              {
                "desc": "localVariableGreater (Trigger)",
                "hint": "Trigger is active if a local modifier variable is greater than the modifier value.",
                "lang": 0
              }
            ]
          }, // localVariableGreater
          {
            "name": "Object Modifier - localVariableContains (Trigger)",
            "tooltips": [
              {
                "desc": "localVariableContains (Trigger)",
                "hint": "Trigger is active if a local modifier variable contains the modifier value.",
                "lang": 0
              }
            ]
          }, // localVariableContains
          {
            "name": "Object Modifier - localVariableStartsWith (Trigger)",
            "tooltips": [
              {
                "desc": "localVariableStartsWith (Trigger)",
                "hint": "Trigger is active if a local modifier variable contains the modifier value.",
                "lang": 0
              }
            ]
          }, // localVariableStartsWith
          {
            "name": "Object Modifier - localVariableEndsWith (Trigger)",
            "tooltips": [
              {
                "desc": "localVariableEndsWith (Trigger)",
                "hint": "Trigger is active if a local modifier variable contains the modifier value.",
                "lang": 0
              }
            ]
          }, // localVariableEndsWith
          {
            "name": "Object Modifier - localVariableExists (Trigger)",
            "tooltips": [
              {
                "desc": "localVariableExists (Trigger)",
                "hint": "Trigger is active if a local modifier variable exists with the matching modifier value.",
                "lang": 0
              }
            ]
          }, // localVariableExists

          {
            "name": "Object Modifier - addVariable (Action)",
            "tooltips": [
              {
                "desc": "addVariable (Action)",
                "hint": "Adds an amount to the objects' variable.",
                "lang": 0
              }
            ]
          }, // addVariable
          {
            "name": "Object Modifier - addVariableOther (Action)",
            "tooltips": [
              {
                "desc": "addVariableOther (Action)",
                "hint": "Adds an amount to a group of object's variables.",
                "lang": 0
              }
            ]
          }, // addVariableOther
          {
            "name": "Object Modifier - subVariable (Action)",
            "tooltips": [
              {
                "desc": "subVariable (Action)",
                "hint": "Subtracts an amount to the objects' variable.",
                "lang": 0
              }
            ]
          }, // subVariable
          {
            "name": "Object Modifier - subVariableOther (Action)",
            "tooltips": [
              {
                "desc": "subVariableOther (Action)",
                "hint": "Subtracts an amount to a group of object's variables.",
                "lang": 0
              }
            ]
          }, // subVariableOther
          {
            "name": "Object Modifier - setVariable (Action)",
            "tooltips": [
              {
                "desc": "setVariable (Action)",
                "hint": "Sets an amount to the objects' variable.",
                "lang": 0
              }
            ]
          }, // setVariable
          {
            "name": "Object Modifier - setVariableOther (Action)",
            "tooltips": [
              {
                "desc": "setVariableOther (Action)",
                "hint": "Sets an amount to a group of object's variables.",
                "lang": 0
              }
            ]
          }, // setVariableOther
          {
            "name": "Object Modifier - setVariableRandom (Action)",
            "tooltips": [
              {
                "desc": "setVariableRandom (Action)",
                "hint": "Sets a random range to the object's variable.",
                "lang": 0
              }
            ]
          }, // setVariableRandom
          {
            "name": "Object Modifier - setVariableRandomOther (Action)",
            "tooltips": [
              {
                "desc": "setVariableRandomOther (Action)",
                "hint": "Sets a random range to a group of object's variables.",
                "lang": 0
              }
            ]
          }, // setVariableRandomOther
          {
            "name": "Object Modifier - loadVariable (Action)",
            "tooltips": [
              {
                "desc": "loadVariable (Action)",
                "hint": "Loads and applies a variable from a profile file.",
                "lang": 0
              }
            ]
          }, // loadVariable
          {
            "name": "Object Modifier - loadVariableOther (Action)",
            "tooltips": [
              {
                "desc": "loadVariableOther (Action)",
                "hint": "Loads and applies a variable to a group of objects from a profile file.",
                "lang": 0
              }
            ]
          }, // loadVariableOther
          {
            "name": "Object Modifier - animateVariableOther (Action)",
            "tooltips": [
              {
                "desc": "animateVariableOther (Action)",
                "hint": "Takes an axis of another object and applies it to the object variable.",
                "lang": 0
              }
            ]
          }, // animateVariableOther
          {
            "name": "Object Modifier - clampVariable (Action)",
            "tooltips": [
              {
                "desc": "clampVariable (Action)",
                "hint": "Forces the object variable to stay within a set range.",
                "lang": 0
              }
            ]
          }, // clampVariable
          {
            "name": "Object Modifier - clampVariableOther (Action)",
            "tooltips": [
              {
                "desc": "clampVariableOther (Action)",
                "hint": "Forces a group of object's variables to stay within a set range.",
                "lang": 0
              }
            ]
          }, // clampVariableOther

          {
            "name": "Object Modifier - variableEquals (Trigger)",
            "tooltips": [
              {
                "desc": "variableEquals (Trigger)",
                "hint": "Trigger is active if the object variable is equal to the modifier value.",
                "lang": 0
              }
            ]
          }, // variableEquals
          {
            "name": "Object Modifier - variableLesserEquals (Trigger)",
            "tooltips": [
              {
                "desc": "variableLesserEquals (Trigger)",
                "hint": "Trigger is active if the object variable is equal to or lesser than the modifier value.",
                "lang": 0
              }
            ]
          }, // variableLesserEquals
          {
            "name": "Object Modifier - variableGreaterEquals (Trigger)",
            "tooltips": [
              {
                "desc": "variableGreaterEquals (Trigger)",
                "hint": "Trigger is active if the object variable is equal to or greater than the modifier value.",
                "lang": 0
              }
            ]
          }, // variableGreaterEquals
          {
            "name": "Object Modifier - variableLesser (Trigger)",
            "tooltips": [
              {
                "desc": "variableLesser (Trigger)",
                "hint": "Trigger is active if the object variable is lesser than the modifier value.",
                "lang": 0
              }
            ]
          }, // variableLesser
          {
            "name": "Object Modifier - variableGreater (Trigger)",
            "tooltips": [
              {
                "desc": "variableGreater (Trigger)",
                "hint": "Trigger is active if the object variable is greater than the modifier value.",
                "lang": 0
              }
            ]
          }, // variableGreater
          {
            "name": "Object Modifier - variableOtherEquals (Trigger)",
            "tooltips": [
              {
                "desc": "variableOtherEquals (Trigger)",
                "hint": "Trigger is active if a different object's variable is equal to the modifier value.",
                "lang": 0
              }
            ]
          }, // variableOtherEquals
          {
            "name": "Object Modifier - variableOtherLesserEquals (Trigger)",
            "tooltips": [
              {
                "desc": "variableOtherLesserEquals (Trigger)",
                "hint": "Trigger is active if a different object's variable is equal to or lesser than the modifier value.",
                "lang": 0
              }
            ]
          }, // variableOtherLesserEquals
          {
            "name": "Object Modifier - variableOtherGreaterEquals (Trigger)",
            "tooltips": [
              {
                "desc": "variableOtherGreaterEquals (Trigger)",
                "hint": "Trigger is active if a different object's variable is equal to or greater than the modifier value.",
                "lang": 0
              }
            ]
          }, // variableOtherGreaterEquals
          {
            "name": "Object Modifier - variableOtherLesser (Trigger)",
            "tooltips": [
              {
                "desc": "variableOtherLesser (Trigger)",
                "hint": "Trigger is active if a different object's variable is lesser than the modifier value.",
                "lang": 0
              }
            ]
          }, // variableOtherLesser
          {
            "name": "Object Modifier - variableOtherGreater (Trigger)",
            "tooltips": [
              {
                "desc": "variableOtherGreater (Trigger)",
                "hint": "Trigger is active if a different object's variable is greater than the modifier value.",
                "lang": 0
              }
            ]
          } // variableOtherGreater
        ],

        // Audio
        [
          {
            "name": "Object Modifier - getPitch (Action)",
            "tooltips": [
              {
                "desc": "getPitch (Action)",
                "hint": "Gets the current audio pitch and passes it to other modifiers.",
                "lang": 0
              }
            ]
          }, // getPitch
          {
            "name": "Object Modifier - getMusicTime (Action)",
            "tooltips": [
              {
                "desc": "getMusicTime (Action)",
                "hint": "Gets the current audio time and passes it to other modifiers.",
                "lang": 0
              }
            ]
          }, // getMusicTime

          {
            "name": "Object Modifier - setPitch (Action)",
            "tooltips": [
              {
                "desc": "setPitch (Action)",
                "hint": "Sets the song pitch (level speed) multiplied by the audio event keyframe's pitch value.",
                "lang": 0
              }
            ]
          }, // setPitch
          {
            "name": "Object Modifier - addPitch (Action)",
            "tooltips": [
              {
                "desc": "addPitch (Action)",
                "hint": "Adds to the song pitch (level speed) multiplied by the audio event keyframe's pitch value.",
                "lang": 0
              }
            ]
          }, // addPitch
          {
            "name": "Object Modifier - setPitchMath (Action)",
            "tooltips": [
              {
                "desc": "setPitchMath (Action)",
                "hint": "Sets the song pitch (level speed) multiplied by the audio event keyframe's pitch value. Uses a math calculation instead of just parsing the number.",
                "lang": 0
              }
            ]
          }, // setPitchMath
          {
            "name": "Object Modifier - addPitchMath (Action)",
            "tooltips": [
              {
                "desc": "addPitchMath (Action)",
                "hint": "Adds to the song pitch (level speed) multiplied by the audio event keyframe's pitch value. Uses a math calculation instead of just parsing the number.",
                "lang": 0
              }
            ]
          }, // addPitchMath
          {
            "name": "Object Modifier - setMusicTime (Action)",
            "tooltips": [
              {
                "desc": "setMusicTime (Action)",
                "hint": "Sets the song time. Recommended for skipping specific parts of a level / song.",
                "lang": 0
              }
            ]
          }, // setMusicTime
          {
            "name": "Object Modifier - setMusicTimeMath (Action)",
            "tooltips": [
              {
                "desc": "setMusicTimeMath (Action)",
                "hint": "Sets the song time using a math equation. Recommended for skipping specific parts of a level / song.",
                "lang": 0
              }
            ]
          }, // setMusicTimeMath
          {
            "name": "Object Modifier - setMusicTimeStartTime (Action)",
            "tooltips": [
              {
                "desc": "setMusicTimeStartTime (Action)",
                "hint": "Sets the song time to where the object spawns. Don't use this by itself, instead include a modifier that will trigger it.",
                "lang": 0
              }
            ]
          }, // setMusicTimeStartTime
          {
            "name": "Object Modifier - setMusicTimeAutokill (Action)",
            "tooltips": [
              {
                "desc": "setMusicTimeAutokill (Action)",
                "hint": "Sets the song time to where the object despawns. Good for skipping a section.",
                "lang": 0
              }
            ]
          }, // setMusicTimeAutokill
          {
            "name": "Object Modifier - setMusicPlaying (Action)",
            "tooltips": [
              {
                "desc": "setMusicPlaying (Action)",
                "hint": "Sets the currently playing state of the song.",
                "lang": 0
              }
            ]
          }, // setMusicPlaying
          {
            "name": "Object Modifier - playSound (Action)",
            "tooltips": [
              {
                "desc": "playSound (Action)",
                "hint": "Plays a sound located in the level folder or a soundlibrary folder in the beatmaps folder. (soundlibrary is only recommended for offline levels)",
                "lang": 0
              }
            ]
          }, // playSound
          {
            "name": "Object Modifier - playSoundOnline (Action)",
            "tooltips": [
              {
                "desc": "playSoundOnline (Action)",
                "hint": "Plays an online sound.",
                "lang": 0
              }
            ]
          }, // playSoundOnline
          {
            "name": "Object Modifier - playDefaultSound (Action)",
            "tooltips": [
              {
                "desc": "playDefaultSound (Action)",
                "hint": "Plays a sound located in the game files.",
                "lang": 0
              }
            ]
          }, // playDefaultSound
          {
            "name": "Object Modifier - audioSource (Action)",
            "tooltips": [
              {
                "desc": "audioSource (Action)",
                "hint": "Works like the playSound modifier, except it aligns the sound time with the music time relative to when the object spawns. Scale X and Y can be used to animate pitch and volume respectively.",
                "lang": 0
              }
            ]
          }, // audioSource
          {
            "name": "Object Modifier - loadSoundAsset (Action)",
            "tooltips": [
              {
                "desc": "loadSoundAsset (Action)",
                "hint": "Loads audio clip data of a sound asset.",
                "lang": 0
              }
            ]
          }, // loadSoundAsset

          {
            "name": "Object Modifier - pitchEquals (Trigger)",
            "tooltips": [
              {
                "desc": "pitchEquals (Trigger)",
                "hint": "Trigger is active if the song pitch (level speed) is equal to the modifier value.",
                "lang": 0
              }
            ]
          }, // pitchEquals
          {
            "name": "Object Modifier - pitchLesserEquals (Trigger)",
            "tooltips": [
              {
                "desc": "pitchLesserEquals (Trigger)",
                "hint": "Trigger is active if the song pitch (level speed) is equal to or lesser than the modifier value.",
                "lang": 0
              }
            ]
          }, // pitchLesserEquals
          {
            "name": "Object Modifier - pitchGreaterEquals (Trigger)",
            "tooltips": [
              {
                "desc": "pitchGreaterEquals (Trigger)",
                "hint": "Trigger is active if the song pitch (level speed) is equal to or greater than the modifier value.",
                "lang": 0
              }
            ]
          }, // pitchGreaterEquals
          {
            "name": "Object Modifier - pitchLesser (Trigger)",
            "tooltips": [
              {
                "desc": "pitchLesser (Trigger)",
                "hint": "Trigger is active if the song pitch (level speed) is lesser than the modifier value.",
                "lang": 0
              }
            ]
          }, // pitchLesser
          {
            "name": "Object Modifier - pitchGreater (Trigger)",
            "tooltips": [
              {
                "desc": "pitchGreater (Trigger)",
                "hint": "Trigger is active if the song pitch (level speed) is greater than the modifier value.",
                "lang": 0
              }
            ]
          }, // pitchGreater
          {
            "name": "Object Modifier - musicTimeGreater (Trigger)",
            "tooltips": [
              {
                "desc": "musicTimeGreater (Trigger)",
                "hint": "Trigger is active if audio time is greater than the modifier value.",
                "lang": 0
              }
            ]
          }, // musicTimeGreater
          {
            "name": "Object Modifier - musicTimeLesser (Trigger)",
            "tooltips": [
              {
                "desc": "musicTimeLesser (Trigger)",
                "hint": "Trigger is active if audio time is lesser than the modifier value.",
                "lang": 0
              }
            ]
          }, // musicTimeLesser
          {
            "name": "Object Modifier - musicPlaying (Trigger)",
            "tooltips": [
              {
                "desc": "musicPlaying (Trigger)",
                "hint": "Trigger is active if audio is playing.",
                "lang": 0
              }
            ]
          } // musicPlaying
        ],

        // Reactive
        [
          {
            "name": "Object Modifier - reactivePos (Action)",
            "tooltips": [
              {
                "desc": "reactivePos (Action)",
                "hint": "Makes the visual object's position react to the music.",
                "lang": 0
              }
            ]
          }, // reactivePos
          {
            "name": "Object Modifier - reactiveSca (Action)",
            "tooltips": [
              {
                "desc": "reactiveSca (Action)",
                "hint": "Makes the visual object's scale react to the music.",
                "lang": 0
              }
            ]
          }, // reactiveSca
          {
            "name": "Object Modifier - reactiveRot (Action)",
            "tooltips": [
              {
                "desc": "reactiveRot (Action)",
                "hint": "Makes the visual object's rotation react to the music.",
                "lang": 0
              }
            ]
          }, // reactiveRot
          {
            "name": "Object Modifier - reactiveCol (Action)",
            "tooltips": [
              {
                "desc": "reactiveCol (Action)",
                "hint": "Makes the visual object's color react to the music. Reactive color adds to the object's current color.",
                "lang": 0
              }
            ]
          }, // reactiveCol
          {
            "name": "Object Modifier - reactiveColLerp (Action)",
            "tooltips": [
              {
                "desc": "reactiveColLerp (Action)",
                "hint": "Makes the visual object's color react to the music. Reactive color interpolates from the object's current color to the set color.",
                "lang": 0
              }
            ]
          }, // reactiveColLerp
          {
            "name": "Object Modifier - reactivePosChain (Action)",
            "tooltips": [
              {
                "desc": "reactivePosChain (Action)",
                "hint": "Makes the object's position react to the music. Works with parenting.",
                "lang": 0
              }
            ]
          }, // reactivePosChain
          {
            "name": "Object Modifier - reactiveScaChain (Action)",
            "tooltips": [
              {
                "desc": "reactiveScaChain (Action)",
                "hint": "Makes the object's scale react to the music. Works with parenting.",
                "lang": 0
              }
            ]
          }, // reactiveScaChain
          {
            "name": "Object Modifier - reactiveRotChain (Action)",
            "tooltips": [
              {
                "desc": "reactiveRotChain (Action)",
                "hint": "Makes the object's rotation react to the music. Works with parenting.",
                "lang": 0
              }
            ]
          } // reactiveRotChain
        ],

        // Level
        [
          {
            "name": "Object Modifier - loadLevel (Action)",
            "tooltips": [
              {
                "desc": "loadLevel (Action)",
                "hint": "Loads a level by its folder name and plays it. Only use for sandboxing purposes, as levels shared through the arcade server or a different service could have a different folder name.",
                "lang": 0
              }
            ]
          }, // loadLevel
          {
            "name": "Object Modifier - loadLevelID (Action)",
            "tooltips": [
              {
                "desc": "loadLevelID (Action)",
                "hint": "Finds a level with a matching arcade ID and plays it. Can be used in both editor and arcade. The level must be loaded in the editor / arcade list.",
                "lang": 0
              }
            ]
          }, // loadLevelID
          {
            "name": "Object Modifier - loadLevelInternal (Action)",
            "tooltips": [
              {
                "desc": "loadLevelInternal (Action)",
                "hint": "Loads a level by its folder name within the current level folder and plays it. This modifier is for cases where you have a level located inside another level.",
                "lang": 0
              }
            ]
          }, // loadLevelInternal
          {
            "name": "Object Modifier - loadLevelPrevious (Action)",
            "tooltips": [
              {
                "desc": "loadLevelPrevious (Action)",
                "hint": "Loads the previously loaded level, if there was any.",
                "lang": 0
              }
            ]
          }, // loadLevelPrevious
          {
            "name": "Object Modifier - loadLevelHub (Action)",
            "tooltips": [
              {
                "desc": "loadLevelHub (Action)",
                "hint": "Loads the current hub level, if the player ever entered one during the current play session. (Play session includes from when the player enters the first level to when they return to the arcade)",
                "lang": 0
              }
            ]
          }, // loadLevelHub
          {
            "name": "Object Modifier - loadLevelInCollection (Action)",
            "tooltips": [
              {
                "desc": "loadLevelInCollection (Action)",
                "hint": "Finds a level with a matching arcade ID within the current level collection and plays it. Only works in the arcade. A level collection must be loaded.",
                "lang": 0
              }
            ]
          }, // loadLevelInCollection
          {
            "name": "Object Modifier - loadLevelCollection (Action)",
            "tooltips": [
              {
                "desc": "loadLevelCollection (Action)",
                "hint": "Finds a level collection and loads a level from it.",
                "lang": 0
              }
            ]
          }, // loadLevelCollection
          {
            "name": "Object Modifier - downloadLevel (Action)",
            "tooltips": [
              {
                "desc": "downloadLevel (Action)",
                "hint": "Finds a level with a matching arcade ID and plays it. If the level was not found, prompt the player to download it with the confirm menu. Only works in the arcade.",
                "lang": 0
              }
            ]
          }, // downloadLevel
          {
            "name": "Object Modifier - endLevel (Action)",
            "tooltips": [
              {
                "desc": "endLevel (Action)",
                "hint": "Forces the end level screen to occur. For cases where you want to end the level differently from the regular way.",
                "lang": 0
              }
            ]
          }, // endLevel
          {
            "name": "Object Modifier - setAudioTransition (Action)",
            "tooltips": [
              {
                "desc": "setAudioTransition (Action)",
                "hint": "Sets the audio transition for the next loaded level.",
                "lang": 0
              }
            ]
          }, // setAudioTransition
          {
            "name": "Object Modifier - setIntroFade (Action)",
            "tooltips": [
              {
                "desc": "setIntroFade (Action)",
                "hint": "Sets the intro fade for the next loaded level.",
                "lang": 0
              }
            ]
          }, // setIntroFade
          {
            "name": "Object Modifier - setLevelEndFunc (Action)",
            "tooltips": [
              {
                "desc": "setLevelEndFunc (Action)",
                "hint": "Sets the function that is run when the level ends. If the function is kept to default, the current function doesn't change.",
                "lang": 0
              }
            ]
          }, // setLevelEndFunc

          {
            "name": "Object Modifier - getCurrentLevelID (Action)",
            "tooltips": [
              {
                "desc": "getCurrentLevelID (Action)",
                "hint": "Gets the levels' ID and passes it to other modifiers.",
                "lang": 0
              }
            ]
          }, // getCurrentLevelID
          {
            "name": "Object Modifier - getCurrentLevelName (Action)",
            "tooltips": [
              {
                "desc": "getCurrentLevelName (Action)",
                "hint": "Gets the levels' name and passes it to other modifiers.",
                "lang": 0
              }
            ]
          }, // getCurrentLevelName
          {
            "name": "Object Modifier - getCurrentLevelRank (Action)",
            "tooltips": [
              {
                "desc": "getCurrentLevelRank (Action)",
                "hint": "Gets the levels' current rank and passes it to other modifiers.",
                "lang": 0
              }
            ]
          }, // getCurrentLevelRank

          {
            "name": "Object Modifier - levelRankEquals (Trigger)",
            "tooltips": [
              {
                "desc": "levelRankEquals (Trigger)",
                "hint": "Trigger is active if the current level's rank is equal to the modifier value.",
                "lang": 0
              }
            ]
          }, // levelRankEquals
          {
            "name": "Object Modifier - levelRankLesserEquals (Trigger)",
            "tooltips": [
              {
                "desc": "levelRankLesserEquals (Trigger)",
                "hint": "Trigger is active if the current level's rank is equal to or lesser than the modifier value.",
                "lang": 0
              }
            ]
          }, // levelRankLesserEquals
          {
            "name": "Object Modifier - levelRankGreaterEquals (Trigger)",
            "tooltips": [
              {
                "desc": "levelRankGreaterEquals (Trigger)",
                "hint": "Trigger is active if the current level's rank is equal to or greater than the modifier value.",
                "lang": 0
              }
            ]
          }, // levelRankGreaterEquals
          {
            "name": "Object Modifier - levelRankLesser (Trigger)",
            "tooltips": [
              {
                "desc": "levelRankLesser (Trigger)",
                "hint": "Trigger is active if the current level's rank is lesser than the modifier value.",
                "lang": 0
              }
            ]
          }, // levelRankLesser
          {
            "name": "Object Modifier - levelRankGreater (Trigger)",
            "tooltips": [
              {
                "desc": "levelRankGreater (Trigger)",
                "hint": "Trigger is active if the current level's rank is greater than the modifier value.",
                "lang": 0
              }
            ]
          }, // levelRankGreater
          {
            "name": "Object Modifier - levelRankOtherEquals (Trigger)",
            "tooltips": [
              {
                "desc": "levelRankOtherEquals (Trigger)",
                "hint": "Trigger is active if a different level's rank is equal to the modifier value.",
                "lang": 0
              }
            ]
          }, // levelRankOtherEquals
          {
            "name": "Object Modifier - levelRankOtherLesserEquals (Trigger)",
            "tooltips": [
              {
                "desc": "levelRankOtherLesserEquals (Trigger)",
                "hint": "Trigger is active if a different level's rank is equal to or lesser than the modifier value.",
                "lang": 0
              }
            ]
          }, // levelRankOtherLesserEquals
          {
            "name": "Object Modifier - levelRankOtherGreaterEquals (Trigger)",
            "tooltips": [
              {
                "desc": "levelRankOtherGreaterEquals (Trigger)",
                "hint": "Trigger is active if a different level's rank is equal to or greater than the modifier value.",
                "lang": 0
              }
            ]
          }, // levelRankOtherGreaterEquals
          {
            "name": "Object Modifier - levelRankOtherLesser (Trigger)",
            "tooltips": [
              {
                "desc": "levelRankOtherLesser (Trigger)",
                "hint": "Trigger is active if a different level's rank is lesser than the modifier value.",
                "lang": 0
              }
            ]
          }, // levelRankOtherLesser
          {
            "name": "Object Modifier - levelRankOtherGreater (Trigger)",
            "tooltips": [
              {
                "desc": "levelRankOtherGreater (Trigger)",
                "hint": "Trigger is active if a different level's rank is greater than the modifier value.",
                "lang": 0
              }
            ]
          }, // levelRankOtherGreater
          {
            "name": "Object Modifier - levelRankCurrentEquals (Trigger)",
            "tooltips": [
              {
                "desc": "levelRankCurrentEquals (Trigger)",
                "hint": "Trigger is active if the calculated level rank is equal to the modifier value.",
                "lang": 0
              }
            ]
          }, // levelRankCurrentEquals
          {
            "name": "Object Modifier - levelRankCurrentLesserEquals (Trigger)",
            "tooltips": [
              {
                "desc": "levelRankCurrentLesserEquals (Trigger)",
                "hint": "Trigger is active if the calculated level rank is equal to or lesser than the modifier value.",
                "lang": 0
              }
            ]
          }, // levelRankCurrentLesserEquals
          {
            "name": "Object Modifier - levelRankCurrentGreaterEquals (Trigger)",
            "tooltips": [
              {
                "desc": "levelRankCurrentGreaterEquals (Trigger)",
                "hint": "Trigger is active if the calculated level rank is equal to or greater than the modifier value.",
                "lang": 0
              }
            ]
          }, // levelRankCurrentGreaterEquals
          {
            "name": "Object Modifier - levelRankCurrentLesser (Trigger)",
            "tooltips": [
              {
                "desc": "levelRankCurrentLesser (Trigger)",
                "hint": "Trigger is active if the calculated level rank is lesser than the modifier value.",
                "lang": 0
              }
            ]
          }, // levelRankCurrentLesser
          {
            "name": "Object Modifier - levelRankCurrentGreater (Trigger)",
            "tooltips": [
              {
                "desc": "levelRankCurrentGreater (Trigger)",
                "hint": "Trigger is active if the calculated level rank is greater than the modifier value.",
                "lang": 0
              }
            ]
          }, // levelRankCurrentGreater

          {
            "name": "Object Modifier - levelUnlocked (Trigger)",
            "tooltips": [
              {
                "desc": "levelUnlocked (Trigger)",
                "hint": "Trigger is active if a level with the matching ID is unlocked.",
                "lang": 0
              }
            ]
          }, // levelUnlocked
          {
            "name": "Object Modifier - levelCompleted (Trigger)",
            "tooltips": [
              {
                "desc": "levelCompleted (Trigger)",
                "hint": "Trigger is active if the current level is unlocked.",
                "lang": 0
              }
            ]
          }, // levelCompleted
          {
            "name": "Object Modifier - levelCompletedOther (Trigger)",
            "tooltips": [
              {
                "desc": "levelCompletedOther (Trigger)",
                "hint": "Trigger is active if a different level is unlocked.",
                "lang": 0
              }
            ]
          }, // levelCompletedOther
          {
            "name": "Object Modifier - levelExists (Trigger)",
            "tooltips": [
              {
                "desc": "levelExists (Trigger)",
                "hint": "Trigger is active if a level is in the user's local levels list.",
                "lang": 0
              }
            ]
          }, // levelExists
          {
            "name": "Object Modifier - levelPathExists (Trigger)",
            "tooltips": [
              {
                "desc": "levelPathExists (Trigger)",
                "hint": "Trigger is active if a level exists in the user's ocal level folder.",
                "lang": 0
              }
            ]
          }, // levelPathExists

          {
            "name": "Object Modifier - unlockAchievement (Action)",
            "tooltips": [
              {
                "desc": "unlockAchievement (Action)",
                "hint": "Unlocks an achievement.",
                "lang": 0
              }
            ]
          }, // unlockAchievement
          {
            "name": "Object Modifier - lockAchievement (Action)",
            "tooltips": [
              {
                "desc": "lockAchievement (Action)",
                "hint": "Unlocks an achievement.",
                "lang": 0
              }
            ]
          }, // lockAchievement
          {
            "name": "Object Modifier - saveLevelRank (Action)",
            "tooltips": [
              {
                "desc": "saveLevelRank (Action)",
                "hint": "Saves the current level rank.",
                "lang": 0
              }
            ]
          }, // saveLevelRank
          {
            "name": "Object Modifier - clearHits (Action)",
            "tooltips": [
              {
                "desc": "clearHits (Action)",
                "hint": "Clears the hit counter, marking the current Level Rank as SS rank.",
                "lang": 0
              }
            ]
          }, // clearHits
          {
            "name": "Object Modifier - addHit (Action)",
            "tooltips": [
              {
                "desc": "addHit (Action)",
                "hint": "Adds to the hit counter.",
                "lang": 0
              }
            ]
          }, // addHit
          {
            "name": "Object Modifier - subHit (Action)",
            "tooltips": [
              {
                "desc": "subHit (Action)",
                "hint": "Subtracts from the hit counter.",
                "lang": 0
              }
            ]
          }, // subHit
          {
            "name": "Object Modifier - clearDeaths (Action)",
            "tooltips": [
              {
                "desc": "clearDeaths (Action)",
                "hint": "Clears the death counter.",
                "lang": 0
              }
            ]
          }, // clearDeaths
          {
            "name": "Object Modifier - addDeath (Action)",
            "tooltips": [
              {
                "desc": "addDeath (Action)",
                "hint": "Adds to the death counter.",
                "lang": 0
              }
            ]
          }, // addDeath
          {
            "name": "Object Modifier - subDeath (Action)",
            "tooltips": [
              {
                "desc": "subDeath (Action)",
                "hint": "Subtracts from the death counter.",
                "lang": 0
              }
            ]
          }, // subDeath

          {
            "name": "Object Modifier - getLevelVariable (Action)",
            "tooltips": [
              {
                "desc": "getLevelVariable (Action)",
                "hint": "Gets a custom variable stored in a levels' save data.",
                "lang": 0
              }
            ]
          }, // getLevelVariable
          {
            "name": "Object Modifier - setLevelVariable (Action)",
            "tooltips": [
              {
                "desc": "setLevelVariable (Action)",
                "hint": "Sets a custom variable stored in a levels' save data.",
                "lang": 0
              }
            ]
          }, // setLevelVariable
          {
            "name": "Object Modifier - removeLevelVariable (Action)",
            "tooltips": [
              {
                "desc": "removeLevelVariable (Action)",
                "hint": "Removes a custom variable stored in a levels' save data.",
                "lang": 0
              }
            ]
          }, // removeLevelVariable
          {
            "name": "Object Modifier - clearLevelVariables (Action)",
            "tooltips": [
              {
                "desc": "clearLevelVariables (Action)",
                "hint": "Clears all custom variables stored in a levels' save data.",
                "lang": 0
              }
            ]
          }, // clearLevelVariables
          {
            "name": "Object Modifier - getCurrentLevelVariable (Action)",
            "tooltips": [
              {
                "desc": "getCurrentLevelVariable (Action)",
                "hint": "Gets a custom variable stored in the current levels' save data.",
                "lang": 0
              }
            ]
          }, // getCurrentLevelVariable
          {
            "name": "Object Modifier - setCurrentLevelVariable (Action)",
            "tooltips": [
              {
                "desc": "setCurrentLevelVariable (Action)",
                "hint": "Sets a custom variable stored in the current levels' save data.",
                "lang": 0
              }
            ]
          }, // setCurrentLevelVariable
          {
            "name": "Object Modifier - removeCurrentLevelVariable (Action)",
            "tooltips": [
              {
                "desc": "removeCurrentLevelVariable (Action)",
                "hint": "Removes a custom variable stored in the current levels' save data.",
                "lang": 0
              }
            ]
          }, // removeCurrentLevelVariable
          {
            "name": "Object Modifier - clearCurrentLevelVariables (Action)",
            "tooltips": [
              {
                "desc": "clearCurrentLevelVariables (Action)",
                "hint": "Clears all custom variables stored in the current levels' save data.",
                "lang": 0
              }
            ]
          } // clearCurrentLevelVariables
        ],

        // Game State
        [
          {
            "name": "Object Modifier - inZenMode (Trigger)",
            "tooltips": [
              {
                "desc": "inZenMode (Trigger)",
                "hint": "Trigger is active if game is in zen mode.",
                "lang": 0
              }
            ]
          }, // inZenMode
          {
            "name": "Object Modifier - inNormal (Trigger)",
            "tooltips": [
              {
                "desc": "inNormal (Trigger)",
                "hint": "Trigger is active if game is in normal mode.",
                "lang": 0
              }
            ]
          }, // inNormal
          {
            "name": "Object Modifier - in1Life (Trigger)",
            "tooltips": [
              {
                "desc": "in1Life (Trigger)",
                "hint": "Trigger is active if game is in 1 life mode.",
                "lang": 0
              }
            ]
          }, // in1Life
          {
            "name": "Object Modifier - inNoHit (Trigger)",
            "tooltips": [
              {
                "desc": "inNoHit (Trigger)",
                "hint": "Trigger is active if game is in 1 hit mode.",
                "lang": 0
              }
            ]
          }, // inNoHit
          {
            "name": "Object Modifier - inPractice (Trigger)",
            "tooltips": [
              {
                "desc": "inPractice (Trigger)",
                "hint": "Trigger is active if game is in practice mode.",
                "lang": 0
              }
            ]
          }, // inPractice
          {
            "name": "Object Modifier - inEditor (Trigger)",
            "tooltips": [
              {
                "desc": "inEditor (Trigger)",
                "hint": "Trigger is active if the user is in the editor.",
                "lang": 0
              }
            ]
          }, // inEditor
          {
            "name": "Object Modifier - isEditing (Trigger)",
            "tooltips": [
              {
                "desc": "isEditing (Trigger)",
                "hint": "Trigger is active if the user is in the editor and is editing.",
                "lang": 0
              }
            ]
          } // isEditing
        ],

        // Component
        [
          {
            "name": "Object Modifier - blur (Action)",
            "tooltips": [
              {
                "desc": "blur (Action)",
                "hint": "Changes the object's material to a blur. Can be animated with opacity if it is turned on.",
                "lang": 0
              }
            ]
          }, // blur
          {
            "name": "Object Modifier - blurOther (Action)",
            "tooltips": [
              {
                "desc": "blurOther (Action)",
                "hint": "Changes all objects in a group's material to a blur. Can be animated with opacity if it is turned on.",
                "lang": 0
              }
            ]
          }, // blurOther
          {
            "name": "Object Modifier - blurVariable (Action)",
            "tooltips": [
              {
                "desc": "blurVariable (Action)",
                "hint": "Changes the object's material to a blur, set via the object variable.",
                "lang": 0
              }
            ]
          }, // blurVariable
          {
            "name": "Object Modifier - blurVariableOther (Action)",
            "tooltips": [
              {
                "desc": "blurVariableOther (Action)",
                "hint": "Changes all objects in a group's material to a blur, set via the object variables.",
                "lang": 0
              }
            ]
          }, // blurVariableOther
          {
            "name": "Object Modifier - blurColored (Action)",
            "tooltips": [
              {
                "desc": "blurColored (Action)",
                "hint": "Changes the object's material to a colored blur. Can be animated with opacity if it is turned on.",
                "lang": 0
              }
            ]
          }, // blurColored
          {
            "name": "Object Modifier - blurColoredOther (Action)",
            "tooltips": [
              {
                "desc": "blurColoredOther (Action)",
                "hint": "Changes all objects in a group's material to a colored blur. Can be animated with opacity if it is turned on.",
                "lang": 0
              }
            ]
          }, // blurColoredOther
          {
            "name": "Object Modifier - doubleSided (Action)",
            "tooltips": [
              {
                "desc": "doubleSided (Action)",
                "hint": "Changes the object's material to a material that allows the object to be seen from the back.",
                "lang": 0
              }
            ]
          }, // doubleSided
          {
            "name": "Object Modifier - particleSystem (Action)",
            "tooltips": [
              {
                "desc": "particleSystem (Action)",
                "hint": "Makes the object emit particles.",
                "lang": 0
              }
            ]
          }, // particleSystem
          {
            "name": "Object Modifier - particleSystemHex (Action)",
            "tooltips": [
              {
                "desc": "particleSystemHex (Action)",
                "hint": "Makes the object emit particles.",
                "lang": 0
              }
            ]
          }, // particleSystemHex
          {
            "name": "Object Modifier - trailRenderer (Action)",
            "tooltips": [
              {
                "desc": "trailRenderer (Action)",
                "hint": "Makes the object leave behind a trail when it moves.",
                "lang": 0
              }
            ]
          }, // trailRenderer
          {
            "name": "Object Modifier - trailRendererHex (Action)",
            "tooltips": [
              {
                "desc": "trailRendererHex (Action)",
                "hint": "Makes the object leave behind a trail when it moves. Allows for hex color codes.",
                "lang": 0
              }
            ]
          }, // trailRendererHex
          {
            "name": "Object Modifier - rigidbody (Action)",
            "tooltips": [
              {
                "desc": "rigidbody (Action)",
                "hint": "Gives the visual object a Rigididbody2D component, allowing for other objects to detect colliion from this one. Gravity does not work with parenting.",
                "lang": 0
              }
            ]
          }, // rigidbody
          {
            "name": "Object Modifier - rigidbodyOther (Action)",
            "tooltips": [
              {
                "desc": "rigidbodyOther (Action)",
                "hint": "Gives a group of visual objects a Rigididbody2D component, allowing for other objects to detect colliion from this one. Gravity does not work with parenting.",
                "lang": 0
              }
            ]
          }, // rigidbodyOther
          {
            "name": "Object Modifier - setRenderType (Action)",
            "tooltips": [
              {
                "desc": "setRenderType (Action)",
                "hint": "Sets the objects' render type.",
                "lang": 0
              }
            ]
          }, // setRenderType
          {
            "name": "Object Modifier - setRenderTypeOther (Action)",
            "tooltips": [
              {
                "desc": "setRenderTypeOther (Action)",
                "hint": "Sets a group of objects' render type.",
                "lang": 0
              }
            ]
          }, // setRenderTypeOther
          {
            "name": "Object Modifier - setRendering (Action)",
            "tooltips": [
              {
                "desc": "setRendering (Action)",
                "hint": "Sets the objects' render settings.",
                "lang": 0
              }
            ]
          }, // setRendering
          {
            "name": "Object Modifier - setOutline (Action)",
            "tooltips": [
              {
                "desc": "setOutline (Action)",
                "hint": "Applies an outline to the object.",
                "lang": 0
              }
            ]
          }, // setOutline
          {
            "name": "Object Modifier - setOutlineOther (Action)",
            "tooltips": [
              {
                "desc": "setOutlineOther (Action)",
                "hint": "Applies an outline to a group of objects.",
                "lang": 0
              }
            ]
          }, // setOutlineOther
          {
            "name": "Object Modifier - setOutlineHexOther (Action)",
            "tooltips": [
              {
                "desc": "setOutlineHexOther (Action)",
                "hint": "Applies an outline to a group of objects.",
                "lang": 0
              }
            ]
          } // setOutlineHexOther
        ],

        // Player
        [
          {
            "name": "Object Modifier - getNearestPlayer (Action)",
            "tooltips": [
              {
                "desc": "getNearestPlayer (Action)",
                "hint": "Gets the index of the player nearest to the object and passes it to other modifiers.",
                "lang": 0
              }
            ]
          }, // getNearestPlayer
          {
            "name": "Object Modifier - getCollidingPlayers (Action)",
            "tooltips": [
              {
                "desc": "getCollidingPlayers (Action)",
                "hint": "Gets the a true of false value of all players colliding with the object and passes it to other modifiers. Each player is assigned to the variable name + _index.",
                "lang": 0
              }
            ]
          }, // getCollidingPlayers
          {
            "name": "Object Modifier - getPlayerHealth (Action)",
            "tooltips": [
              {
                "desc": "getPlayerHealth (Action)",
                "hint": "Gets the health of a player at an index and passes it to other modifiers.",
                "lang": 0
              }
            ]
          }, // getPlayerHealth
          {
            "name": "Object Modifier - getPlayerLives (Action)",
            "tooltips": [
              {
                "desc": "getPlayerLives (Action)",
                "hint": "Gets the lives count of a player at an index and passes it to other modifiers.",
                "lang": 0
              }
            ]
          }, // getPlayerLives
          {
            "name": "Object Modifier - getPlayerPosX (Action)",
            "tooltips": [
              {
                "desc": "getPlayerPosX (Action)",
                "hint": "Gets the x position of a player at an index and passes it to other modifiers.",
                "lang": 0
              }
            ]
          }, // getPlayerPosX
          {
            "name": "Object Modifier - getPlayerPosY (Action)",
            "tooltips": [
              {
                "desc": "getPlayerPosY (Action)",
                "hint": "Gets the y position of a player at an index and passes it to other modifiers.",
                "lang": 0
              }
            ]
          }, // getPlayerPosY
          {
            "name": "Object Modifier - getPlayerRot (Action)",
            "tooltips": [
              {
                "desc": "getPlayerRot (Action)",
                "hint": "Gets the rotation of a player at an index and passes it to other modifiers.",
                "lang": 0
              }
            ]
          }, // getPlayerRot

          {
            "name": "Object Modifier - playerCollide (Trigger)",
            "tooltips": [
              {
                "desc": "playerCollide (Trigger)",
                "hint": "Trigger is active if the object is colliding with the player.",
                "lang": 0
              }
            ]
          }, // playerCollide
          {
            "name": "Object Modifier - playerCollideIndex (Trigger)",
            "tooltips": [
              {
                "desc": "playerCollideIndex (Trigger)",
                "hint": "Trigger is active if the object is colliding with the specified player at the index.",
                "lang": 0
              }
            ]
          }, // playerCollideIndex
          {
            "name": "Object Modifier - playerCollideOther (Trigger)",
            "tooltips": [
              {
                "desc": "playerCollideOther (Trigger)",
                "hint": "Trigger is active if any object in a group is colliding with the player.",
                "lang": 0
              }
            ]
          }, // playerCollideOther
          {
            "name": "Object Modifier - playerCollideIndexOther (Trigger)",
            "tooltips": [
              {
                "desc": "playerCollideIndexOther (Trigger)",
                "hint": "Trigger is active if any object in a group is colliding with the specified player at the index.",
                "lang": 0
              }
            ]
          }, // playerCollideIndexOther
          {
            "name": "Object Modifier - playerHealthEquals (Trigger)",
            "tooltips": [
              {
                "desc": "playerHealthEquals (Trigger)",
                "hint": "Trigger is active if any player's health is equal to the modifier value.",
                "lang": 0
              }
            ]
          }, // playerHealthEquals
          {
            "name": "Object Modifier - playerHealthLesserEquals (Trigger)",
            "tooltips": [
              {
                "desc": "playerHealthLesserEquals (Trigger)",
                "hint": "Trigger is active if any player's health is equal to or lesser than the modifier value.",
                "lang": 0
              }
            ]
          }, // playerHealthLesserEquals
          {
            "name": "Object Modifier - playerHealthGreaterEquals (Trigger)",
            "tooltips": [
              {
                "desc": "playerHealthGreaterEquals (Trigger)",
                "hint": "Trigger is active if any player's health is equal to or greater than the modifier value.",
                "lang": 0
              }
            ]
          }, // playerHealthGreaterEquals
          {
            "name": "Object Modifier - playerHealthLesser (Trigger)",
            "tooltips": [
              {
                "desc": "playerHealthLesser (Trigger)",
                "hint": "Trigger is active if any player's health is lesser than the modifier value.",
                "lang": 0
              }
            ]
          }, // playerHealthLesser
          {
            "name": "Object Modifier - playerHealthGreater (Trigger)",
            "tooltips": [
              {
                "desc": "playerHealthGreater (Trigger)",
                "hint": "Trigger is active if any player's health is greater than the modifier value.",
                "lang": 0
              }
            ]
          }, // playerHealthGreater
          {
            "name": "Object Modifier - playerDeathsEquals (Trigger)",
            "tooltips": [
              {
                "desc": "playerDeathsEquals (Trigger)",
                "hint": "Trigger is active if the global death count is equal to the modifier value.",
                "lang": 0
              }
            ]
          }, // playerDeathsEquals
          {
            "name": "Object Modifier - playerDeathsLesserEquals (Trigger)",
            "tooltips": [
              {
                "desc": "playerDeathsLesserEquals (Trigger)",
                "hint": "Trigger is active if the global death count is equal to or lesser than the modifier value.",
                "lang": 0
              }
            ]
          }, // playerDeathsLesserEquals
          {
            "name": "Object Modifier - playerDeathsGreaterEquals (Trigger)",
            "tooltips": [
              {
                "desc": "playerDeathsGreaterEquals (Trigger)",
                "hint": "Trigger is active if the global death count is equal to or greater than the modifier value.",
                "lang": 0
              }
            ]
          }, // playerDeathsGreaterEquals
          {
            "name": "Object Modifier - playerDeathsLesser (Trigger)",
            "tooltips": [
              {
                "desc": "playerDeathsLesser (Trigger)",
                "hint": "Trigger is active if the global death count is lesser than the modifier value.",
                "lang": 0
              }
            ]
          }, // playerDeathsLesser
          {
            "name": "Object Modifier - playerDeathsGreater (Trigger)",
            "tooltips": [
              {
                "desc": "playerDeathsGreater (Trigger)",
                "hint": "Trigger is active if the global death count is greater than the modifier value.",
                "lang": 0
              }
            ]
          }, // playerDeathsGreater
          {
            "name": "Object Modifier - playerBoostEquals (Trigger)",
            "tooltips": [
              {
                "desc": "playerBoostEquals (Trigger)",
                "hint": "Trigger is active if the boost count is equal to the modifier value.",
                "lang": 0
              }
            ]
          }, // playerBoostEquals
          {
            "name": "Object Modifier - playerBoostLesserEquals (Trigger)",
            "tooltips": [
              {
                "desc": "playerBoostLesserEquals (Trigger)",
                "hint": "Trigger is active if the boost count is equal to or lesser than the modifier value.",
                "lang": 0
              }
            ]
          }, // playerBoostLesserEquals
          {
            "name": "Object Modifier - playerBoostGreaterEquals (Trigger)",
            "tooltips": [
              {
                "desc": "playerBoostGreaterEquals (Trigger)",
                "hint": "Trigger is active if the boost count is equal to or greater than the modifier value.",
                "lang": 0
              }
            ]
          }, // playerBoostGreaterEquals
          {
            "name": "Object Modifier - playerBoostLesser (Trigger)",
            "tooltips": [
              {
                "desc": "playerBoostLesser (Trigger)",
                "hint": "Trigger is active if the boost count is lesser than the modifier value.",
                "lang": 0
              }
            ]
          }, // playerBoostLesser
          {
            "name": "Object Modifier - playerBoostGreater (Trigger)",
            "tooltips": [
              {
                "desc": "playerBoostGreater (Trigger)",
                "hint": "Trigger is active if the boost count is greater than the modifier value.",
                "lang": 0
              }
            ]
          }, // playerBoostGreater
          {
            "name": "Object Modifier - playerCountEquals (Trigger)",
            "tooltips": [
              {
                "desc": "playerCountEquals (Trigger)",
                "hint": "Trigger is active if the total player count is equal to the modifier value.",
                "lang": 0
              }
            ]
          }, // playerCountEquals
          {
            "name": "Object Modifier - playerCountLesserEquals (Trigger)",
            "tooltips": [
              {
                "desc": "playerCountLesserEquals (Trigger)",
                "hint": "Trigger is active if the total player count is equal to or lesser than the modifier value.",
                "lang": 0
              }
            ]
          }, // playerCountLesserEquals
          {
            "name": "Object Modifier - playerCountGreaterEquals (Trigger)",
            "tooltips": [
              {
                "desc": "playerCountGreaterEquals (Trigger)",
                "hint": "Trigger is active if the total player count is equal to or greater than the modifier value.",
                "lang": 0
              }
            ]
          }, // playerCountGreaterEquals
          {
            "name": "Object Modifier - playerCountLesser (Trigger)",
            "tooltips": [
              {
                "desc": "playerCountLesser (Trigger)",
                "hint": "Trigger is active if the total player count is lesser than the modifier value.",
                "lang": 0
              }
            ]
          }, // playerCountLesser
          {
            "name": "Object Modifier - playerCountGreater (Trigger)",
            "tooltips": [
              {
                "desc": "playerCountGreater (Trigger)",
                "hint": "Trigger is active if the total player count is greater than the modifier value.",
                "lang": 0
              }
            ]
          }, // playerCountGreater
          {
            "name": "Object Modifier - playerMoving (Trigger)",
            "tooltips": [
              {
                "desc": "playerMoving (Trigger)",
                "hint": "Trigger is active if any player is moving.",
                "lang": 0
              }
            ]
          }, // playerMoving
          {
            "name": "Object Modifier - playerBoosting (Trigger)",
            "tooltips": [
              {
                "desc": "playerBoosting (Trigger)",
                "hint": "Trigger is active if the closest player to the object is boosting.",
                "lang": 0
              }
            ]
          }, // playerBoosting
          {
            "name": "Object Modifier - playerAlive (Trigger)",
            "tooltips": [
              {
                "desc": "playerAlive (Trigger)",
                "hint": "Trigger is active if a specific player is alive.",
                "lang": 0
              }
            ]
          }, // playerAlive
          {
            "name": "Object Modifier - playerDistanceGreater (Trigger)",
            "tooltips": [
              {
                "desc": "playerDistanceGreater (Trigger)",
                "hint": "Trigger is active if any player is outside the range of the object.",
                "lang": 0
              }
            ]
          }, // playerDistanceGreater
          {
            "name": "Object Modifier - playerDistanceLesser (Trigger)",
            "tooltips": [
              {
                "desc": "playerDistanceLesser (Trigger)",
                "hint": "Trigger is active if any player is inside the range of the object.",
                "lang": 0
              }
            ]
          }, // playerDistanceLesser
          {
            "name": "Object Modifier - onPlayerHit (Trigger)",
            "tooltips": [
              {
                "desc": "onPlayerHit (Trigger)",
                "hint": "Trigger is active if a player was hit.",
                "lang": 0
              }
            ]
          }, // onPlayerHit
          {
            "name": "Object Modifier - onPlayerDeath (Trigger)",
            "tooltips": [
              {
                "desc": "onPlayerDeath (Trigger)",
                "hint": "Trigger is active if a player died.",
                "lang": 0
              }
            ]
          }, // onPlayerDeath

          {
            "name": "Object Modifier - playerHeal (Action)",
            "tooltips": [
              {
                "desc": "playerHeal (Action)",
                "hint": "Heals the player closest to the object.",
                "lang": 0
              }
            ]
          }, // playerHeal
          {
            "name": "Object Modifier - playerHealIndex (Action)",
            "tooltips": [
              {
                "desc": "playerHealIndex (Action)",
                "hint": "Heals the player at an index.",
                "lang": 0
              }
            ]
          }, // playerHealIndex
          {
            "name": "Object Modifier - playerHealAll (Action)",
            "tooltips": [
              {
                "desc": "playerHealAll (Action)",
                "hint": "Heals all players.",
                "lang": 0
              }
            ]
          }, // playerHealAll
          {
            "name": "Object Modifier - playerHit (Action)",
            "tooltips": [
              {
                "desc": "playerHit (Action)",
                "hint": "Hits the player closest to the object.",
                "lang": 0
              }
            ]
          }, // playerHit
          {
            "name": "Object Modifier - playerHitIndex (Action)",
            "tooltips": [
              {
                "desc": "playerHitIndex (Action)",
                "hint": "Hits the player at an index.",
                "lang": 0
              }
            ]
          }, // playerHitIndex
          {
            "name": "Object Modifier - playerHitAll (Action)",
            "tooltips": [
              {
                "desc": "playerHitAll (Action)",
                "hint": "Hits all players.",
                "lang": 0
              }
            ]
          }, // playerHitAll
          {
            "name": "Object Modifier - playerKill (Action)",
            "tooltips": [
              {
                "desc": "playerKill (Action)",
                "hint": "Kills the player closest to the object.",
                "lang": 0
              }
            ]
          }, // playerKill
          {
            "name": "Object Modifier - playerKillIndex (Action)",
            "tooltips": [
              {
                "desc": "playerKillIndex (Action)",
                "hint": "Kills the player at an index.",
                "lang": 0
              }
            ]
          }, // playerKillIndex
          {
            "name": "Object Modifier - playerKillAll (Action)",
            "tooltips": [
              {
                "desc": "playerKillAll (Action)",
                "hint": "Kills all players.",
                "lang": 0
              }
            ]
          }, // playerKillAll
          {
            "name": "Object Modifier - playerRespawn (Action)",
            "tooltips": [
              {
                "desc": "playerRespawn (Action)",
                "hint": "Respawns the player closest to the object.",
                "lang": 0
              }
            ]
          }, // playerRespawn
          {
            "name": "Object Modifier - playerRespawnIndex (Action)",
            "tooltips": [
              {
                "desc": "playerRespawnIndex (Action)",
                "hint": "Respawns the player at an index.",
                "lang": 0
              }
            ]
          }, // playerRespawnIndex
          {
            "name": "Object Modifier - playerRespawnAll (Action)",
            "tooltips": [
              {
                "desc": "playerRespawnAll (Action)",
                "hint": "Respawns all players.",
                "lang": 0
              }
            ]
          }, // playerRespawnAll

          {
            "name": "Object Modifier - playerEnable (Action)",
            "tooltips": [
              {
                "desc": "playerEnable (Action)",
                "hint": "Enables the player closest to the object.",
                "lang": 0
              }
            ]
          }, // playerEnable
          {
            "name": "Object Modifier - playerEnableIndex (Action)",
            "tooltips": [
              {
                "desc": "playerEnableIndex (Action)",
                "hint": "Enables the player at an index.",
                "lang": 0
              }
            ]
          }, // playerEnableIndex
          {
            "name": "Object Modifier - playerEnableAll (Action)",
            "tooltips": [
              {
                "desc": "playerEnableAll (Action)",
                "hint": "Enables all players.",
                "lang": 0
              }
            ]
          }, // playerEnableAll
          {
            "name": "Object Modifier - playerMove (Action)",
            "tooltips": [
              {
                "desc": "playerMove (Action)",
                "hint": "Moves the player closest to the object along both the X and Y axis.",
                "lang": 0
              }
            ]
          }, // playerMove
          {
            "name": "Object Modifier - playerMoveIndex (Action)",
            "tooltips": [
              {
                "desc": "playerMoveIndex (Action)",
                "hint": "Moves a player at an index along both the X and Y axis.",
                "lang": 0
              }
            ]
          }, // playerMoveIndex
          {
            "name": "Object Modifier - playerMoveAll (Action)",
            "tooltips": [
              {
                "desc": "playerMoveAll (Action)",
                "hint": "Moves all players along both the X and Y axis.",
                "lang": 0
              }
            ]
          }, // playerMoveAll
          {
            "name": "Object Modifier - playerMoveX (Action)",
            "tooltips": [
              {
                "desc": "playerMoveX (Action)",
                "hint": "Moves the player closest to the object along the X axis.",
                "lang": 0
              }
            ]
          }, // playerMoveX
          {
            "name": "Object Modifier - playerMoveXIndex (Action)",
            "tooltips": [
              {
                "desc": "playerMoveXIndex (Action)",
                "hint": "Moves a player at an index along the X axis.",
                "lang": 0
              }
            ]
          }, // playerMoveXIndex
          {
            "name": "Object Modifier - playerMoveXAll (Action)",
            "tooltips": [
              {
                "desc": "playerMoveXAll (Action)",
                "hint": "Moves all players along the X axis.",
                "lang": 0
              }
            ]
          }, // playerMoveXAll
          {
            "name": "Object Modifier - playerMoveY (Action)",
            "tooltips": [
              {
                "desc": "playerMoveY (Action)",
                "hint": "Moves the player closest to the object along the Y axis.",
                "lang": 0
              }
            ]
          }, // playerMoveY
          {
            "name": "Object Modifier - playerMoveYIndex (Action)",
            "tooltips": [
              {
                "desc": "playerMoveYIndex (Action)",
                "hint": "Moves a player at an index along the Y axis.",
                "lang": 0
              }
            ]
          }, // playerMoveYIndex
          {
            "name": "Object Modifier - playerMoveYAll (Action)",
            "tooltips": [
              {
                "desc": "playerMoveYAll (Action)",
                "hint": "Moves all players along the Y axis.",
                "lang": 0
              }
            ]
          }, // playerMoveYAll
          {
            "name": "Object Modifier - playerRotate (Action)",
            "tooltips": [
              {
                "desc": "playerRotate (Action)",
                "hint": "Rotates the player closest to the object.",
                "lang": 0
              }
            ]
          }, // playerRotate
          {
            "name": "Object Modifier - playerRotateIndex (Action)",
            "tooltips": [
              {
                "desc": "playerRotateIndex (Action)",
                "hint": "Rotates a player at an index.",
                "lang": 0
              }
            ]
          }, // playerRotateIndex
          {
            "name": "Object Modifier - playerRotateAll (Action)",
            "tooltips": [
              {
                "desc": "playerRotateAll (Action)",
                "hint": "Rotates all players.",
                "lang": 0
              }
            ]
          }, // playerRotateAll
          {
            "name": "Object Modifier - playerMoveToObject (Action)",
            "tooltips": [
              {
                "desc": "playerMoveToObject (Action)",
                "hint": "Moves the player closest to the object along both the X and Y axis and locks the position to the object's position.",
                "lang": 0
              }
            ]
          }, // playerMoveToObject
          {
            "name": "Object Modifier - playerMoveIndexToObject (Action)",
            "tooltips": [
              {
                "desc": "playerMoveIndexToObject (Action)",
                "hint": "Moves the player at an index along both the X and Y axis and locks the position to the object's position.",
                "lang": 0
              }
            ]
          }, // playerMoveIndexToObject
          {
            "name": "Object Modifier - playerMoveAllToObject (Action)",
            "tooltips": [
              {
                "desc": "playerMoveAllToObject (Action)",
                "hint": "Moves all players along both the X and Y axis and locks the position to the object's position.",
                "lang": 0
              }
            ]
          }, // playerMoveAllToObject
          {
            "name": "Object Modifier - playerMoveXToObject (Action)",
            "tooltips": [
              {
                "desc": "playerMoveXToObject (Action)",
                "hint": "Moves the player closest to the object along the X axis and locks the position to the object's position.",
                "lang": 0
              }
            ]
          }, // playerMoveXToObject
          {
            "name": "Object Modifier - playerMoveXIndexToObject (Action)",
            "tooltips": [
              {
                "desc": "playerMoveXIndexToObject (Action)",
                "hint": "Moves the player at an index along the X axis and locks the position to the object's position.",
                "lang": 0
              }
            ]
          }, // playerMoveXIndexToObject
          {
            "name": "Object Modifier - playerMoveXAllToObject (Action)",
            "tooltips": [
              {
                "desc": "playerMoveXAllToObject (Action)",
                "hint": "Moves all players along the X axis and locks the position to the object's position.",
                "lang": 0
              }
            ]
          }, // playerMoveXAllToObject
          {
            "name": "Object Modifier - playerMoveYToObject (Action)",
            "tooltips": [
              {
                "desc": "playerMoveYToObject (Action)",
                "hint": "Moves the player closest to the object along the Y axis and locks the position to the object's position.",
                "lang": 0
              }
            ]
          }, // playerMoveYToObject
          {
            "name": "Object Modifier - playerMoveYIndexToObject (Action)",
            "tooltips": [
              {
                "desc": "playerMoveYIndexToObject (Action)",
                "hint": "Moves the player at an index along the Y axis and locks the position to the object's position.",
                "lang": 0
              }
            ]
          }, // playerMoveYIndexToObject
          {
            "name": "Object Modifier - playerMoveYAllToObject (Action)",
            "tooltips": [
              {
                "desc": "playerMoveYAllToObject (Action)",
                "hint": "Moves all players along the Y axis and locks the position to the object's position.",
                "lang": 0
              }
            ]
          }, // playerMoveYAllToObject
          {
            "name": "Object Modifier - playerRotateToObject (Action)",
            "tooltips": [
              {
                "desc": "playerRotateToObject (Action)",
                "hint": "Rotates the player closest to the object and locks the rotation to the object's rotation.",
                "lang": 0
              }
            ]
          }, // playerRotateToObject
          {
            "name": "Object Modifier - playerRotateIndexToObject (Action)",
            "tooltips": [
              {
                "desc": "playerRotateIndexToObject (Action)",
                "hint": "Rotates the player at an index and locks the rotation to the object's rotation.",
                "lang": 0
              }
            ]
          }, // playerRotateIndexToObject
          {
            "name": "Object Modifier - playerRotateAllToObject (Action)",
            "tooltips": [
              {
                "desc": "playerRotateAllToObject (Action)",
                "hint": "Rotates all players and locks the rotation to the object's rotation.",
                "lang": 0
              }
            ]
          }, // playerRotateAllToObject
          {
            "name": "Object Modifier - playerDrag (Action)",
            "tooltips": [
              {
                "desc": "playerDrag (Action)",
                "hint": "Drags the player closest to the object around with the object, but allows the player free movement.",
                "lang": 0
              }
            ]
          }, // playerDrag
          {
            "name": "Object Modifier - playerBoost (Action)",
            "tooltips": [
              {
                "desc": "playerBoost (Action)",
                "hint": "Forces the player closest to the object to boost.",
                "lang": 0
              }
            ]
          }, // playerBoost
          {
            "name": "Object Modifier - playerBoostIndex (Action)",
            "tooltips": [
              {
                "desc": "playerBoostIndex (Action)",
                "hint": "Forces the player at an index to boost.",
                "lang": 0
              }
            ]
          }, // playerBoostIndex
          {
            "name": "Object Modifier - playerBoostAll (Action)",
            "tooltips": [
              {
                "desc": "playerBoostAll (Action)",
                "hint": "Forces all players to boost.",
                "lang": 0
              }
            ]
          }, // playerBoostAll
          {
            "name": "Object Modifier - playerCancelBoost (Action)",
            "tooltips": [
              {
                "desc": "playerCancelBoost (Action)",
                "hint": "Forces the player closest to the object to cancel the current boost.",
                "lang": 0
              }
            ]
          }, // playerCancelBoost
          {
            "name": "Object Modifier - playerCancelBoostIndex (Action)",
            "tooltips": [
              {
                "desc": "playerCancelBoostIndex (Action)",
                "hint": "Forces the player at an index to cancel the current boost.",
                "lang": 0
              }
            ]
          }, // playerCancelBoostIndex
          {
            "name": "Object Modifier - playerCancelBoostAll (Action)",
            "tooltips": [
              {
                "desc": "playerCancelBoostAll (Action)",
                "hint": "Forces all players to cancel their current boost.",
                "lang": 0
              }
            ]
          }, // playerCancelBoostAll
          {
            "name": "Object Modifier - playerDisableBoost (Action)",
            "tooltips": [
              {
                "desc": "playerDisableBoost (Action)",
                "hint": "Prevents the player closest to the object from boosting.",
                "lang": 0
              }
            ]
          }, // playerDisableBoost
          {
            "name": "Object Modifier - playerDisableBoostIndex (Action)",
            "tooltips": [
              {
                "desc": "playerDisableBoostIndex (Action)",
                "hint": "Prevents the player at an index from boosting.",
                "lang": 0
              }
            ]
          }, // playerDisableBoostIndex
          {
            "name": "Object Modifier - playerDisableBoostAll (Action)",
            "tooltips": [
              {
                "desc": "playerDisableBoostAll (Action)",
                "hint": "Prevents all players from boosting.",
                "lang": 0
              }
            ]
          }, // playerDisableBoostAll
          {
            "name": "Object Modifier - playerEnableBoost (Action)",
            "tooltips": [
              {
                "desc": "playerEnableBoost (Action)",
                "hint": "Allows the player closest to the object to boost.",
                "lang": 0
              }
            ]
          }, // playerEnableBoost
          {
            "name": "Object Modifier - playerEnableBoostIndex (Action)",
            "tooltips": [
              {
                "desc": "playerEnableBoostIndex (Action)",
                "hint": "Allows the player at an index to boost.",
                "lang": 0
              }
            ]
          }, // playerEnableBoostIndex
          {
            "name": "Object Modifier - playerEnableBoostAll (Action)",
            "tooltips": [
              {
                "desc": "playerEnableBoostAll (Action)",
                "hint": "Allows all players to boost.",
                "lang": 0
              }
            ]
          }, // playerEnableBoostAll
          {
            "name": "Object Modifier - playerEnableMove (Action)",
            "tooltips": [
              {
                "desc": "playerEnableMove (Action)",
                "hint": "Allows the player closest to the object to move and rotate.",
                "lang": 0
              }
            ]
          }, // playerEnableMove
          {
            "name": "Object Modifier - playerEnableMoveIndex (Action)",
            "tooltips": [
              {
                "desc": "playerEnableMoveIndex (Action)",
                "hint": "Allows the player at an index to move and rotate.",
                "lang": 0
              }
            ]
          }, // playerEnableMoveIndex
          {
            "name": "Object Modifier - playerEnableMoveIndex (Action)",
            "tooltips": [
              {
                "desc": "playerEnableMoveIndex (Action)",
                "hint": "Allows all players to move and rotate.",
                "lang": 0
              }
            ]
          }, // playerEnableMoveIndex
          {
            "name": "Object Modifier - playerSpeed (Action)",
            "tooltips": [
              {
                "desc": "playerSpeed (Action)",
                "hint": "Sets the global speed of all players.",
                "lang": 0
              }
            ]
          }, // playerSpeed
          {
            "name": "Object Modifier - playerVelocityAll (Action)",
            "tooltips": [
              {
                "desc": "playerVelocityAll (Action)",
                "hint": "Sets velocity of all players along both the X and Y axis.",
                "lang": 0
              }
            ]
          }, // playerVelocityAll
          {
            "name": "Object Modifier - playerVelocityXAll (Action)",
            "tooltips": [
              {
                "desc": "playerVelocityXAll (Action)",
                "hint": "Sets velocity of all players along the X axis.",
                "lang": 0
              }
            ]
          }, // playerVelocityXAll
          {
            "name": "Object Modifier - playerVelocityYAll (Action)",
            "tooltips": [
              {
                "desc": "playerVelocityYAll (Action)",
                "hint": "Sets velocity of all players along the Y axis.",
                "lang": 0
              }
            ]
          }, // playerVelocityYAll
          {
            "name": "Object Modifier - playerEnableDamage (Action)",
            "tooltips": [
              {
                "desc": "playerEnableDamage (Action)",
                "hint": "Allows the player closest to the object to take damage.",
                "lang": 0
              }
            ]
          }, // playerEnableDamage
          {
            "name": "Object Modifier - playerEnableDamageIndex (Action)",
            "tooltips": [
              {
                "desc": "playerEnableDamageIndex (Action)",
                "hint": "Allows the player at an index to take damage.",
                "lang": 0
              }
            ]
          }, // playerEnableDamageIndex
          {
            "name": "Object Modifier - playerEnableDamageAll (Action)",
            "tooltips": [
              {
                "desc": "playerEnableDamageAll (Action)",
                "hint": "Allows all players to take damage.",
                "lang": 0
              }
            ]
          }, // playerEnableDamageAll
          {
            "name": "Object Modifier - setGameMode (Action)",
            "tooltips": [
              {
                "desc": "setGameMode (Action)",
                "hint": "Sets the current gamemode of the level.",
                "lang": 0
              }
            ]
          }, // setGameMode
          {
            "name": "Object Modifier - gameMode (Action)",
            "tooltips": [
              {
                "desc": "gameMode (Action)",
                "hint": "Sets the current gamemode of the level. This modifier is deprecated, use setGameMode instead.",
                "lang": 0
              }
            ]
          }, // gameMode
          {
            "name": "Object Modifier - setPlayerModel (Action)",
            "tooltips": [
              {
                "desc": "setPlayerModel (Action)",
                "hint": "Sets a specified player's player model.",
                "lang": 0
              }
            ]
          }, // setPlayerModel
          {
            "name": "Object Modifier - blackHole (Action)",
            "tooltips": [
              {
                "desc": "blackHole (Action)",
                "hint": "Pulls the nearest player towards the center of the object.",
                "lang": 0
              }
            ]
          }, // blackHole
          {
            "name": "Object Modifier - blackHoleIndex (Action)",
            "tooltips": [
              {
                "desc": "blackHoleIndex (Action)",
                "hint": "Pulls a player at an index towards the center of the object.",
                "lang": 0
              }
            ]
          }, // blackHoleIndex
          {
            "name": "Object Modifier - blackHoleAll (Action)",
            "tooltips": [
              {
                "desc": "blackHoleAll (Action)",
                "hint": "Pulls all players towards the center of the object.",
                "lang": 0
              }
            ]
          }, // blackHoleAll
          {
            "name": "Object Modifier - whiteHole (Action)",
            "tooltips": [
              {
                "desc": "whiteHole (Action)",
                "hint": "Pushes the nearest player away from the center of the object.",
                "lang": 0
              }
            ]
          }, // whiteHole
          {
            "name": "Object Modifier - whiteHoleIndex (Action)",
            "tooltips": [
              {
                "desc": "whiteHoleIndex (Action)",
                "hint": "Pushes a player at an index away from the center of the object.",
                "lang": 0
              }
            ]
          }, // whiteHoleIndex
          {
            "name": "Object Modifier - whiteHoleAll (Action)",
            "tooltips": [
              {
                "desc": "whiteHoleAll (Action)",
                "hint": "Pushes all players away from the center of the object.",
                "lang": 0
              }
            ]
          } // whiteHoleAll
        ],

        // Controls
        [
          {
            "name": "Object Modifier - showMouse (Action)",
            "tooltips": [
              {
                "desc": "showMouse (Action)",
                "hint": "Shows the mouse cursor. Normally the mouse is disabled in levels, but it can be re-enabled for cases where you want mouse interaction.",
                "lang": 0
              }
            ]
          }, // showMouse
          {
            "name": "Object Modifier - hideMouse (Action)",
            "tooltips": [
              {
                "desc": "hideMouse (Action)",
                "hint": "Hides the mouse cursor.",
                "lang": 0
              }
            ]
          }, // hideMouse
          {
            "name": "Object Modifier - setMousePosition (Action)",
            "tooltips": [
              {
                "desc": "setMousePosition (Action)",
                "hint": "Sets the mouse position relative to the Window.",
                "lang": 0
              }
            ]
          }, // setMousePosition
          {
            "name": "Object Modifier - followMousePosition (Action)",
            "tooltips": [
              {
                "desc": "followMousePosition (Action)",
                "hint": "Makes the object follow the mouse.",
                "lang": 0
              }
            ]
          }, // followMousePosition

          {
            "name": "Object Modifier - keyPressDown (Trigger)",
            "tooltips": [
              {
                "desc": "keyPressDown (Trigger)",
                "hint": "Trigger is active if a specific key was pressed.",
                "lang": 0
              }
            ]
          }, // keyPressDown
          {
            "name": "Object Modifier - keyPress (Trigger)",
            "tooltips": [
              {
                "desc": "keyPress (Trigger)",
                "hint": "Trigger is active if a specific key is being pressed.",
                "lang": 0
              }
            ]
          }, // keyPress
          {
            "name": "Object Modifier - keyPressUp (Trigger)",
            "tooltips": [
              {
                "desc": "keyPressUp (Trigger)",
                "hint": "Trigger is active if a specific key was released.",
                "lang": 0
              }
            ]
          }, // keyPressUp
          {
            "name": "Object Modifier - controlPressDown (Trigger)",
            "tooltips": [
              {
                "desc": "controlPressDown (Trigger)",
                "hint": "Trigger is active if a specific controller button was pressed.",
                "lang": 0
              }
            ]
          }, // controlPressDown
          {
            "name": "Object Modifier - controlPress (Trigger)",
            "tooltips": [
              {
                "desc": "controlPress (Trigger)",
                "hint": "Trigger is active if a specific controller button is being pressed.",
                "lang": 0
              }
            ]
          }, // controlPress
          {
            "name": "Object Modifier - controlPressUp (Trigger)",
            "tooltips": [
              {
                "desc": "controlPressUp (Trigger)",
                "hint": "Trigger is active if a specific controller button was released.",
                "lang": 0
              }
            ]
          }, // controlPressUp
          {
            "name": "Object Modifier - mouseButtonDown (Trigger)",
            "tooltips": [
              {
                "desc": "mouseButtonDown (Trigger)",
                "hint": "Trigger is active if a specific mouse button was pressed.",
                "lang": 0
              }
            ]
          }, // mouseButtonDown
          {
            "name": "Object Modifier - mouseButton (Trigger)",
            "tooltips": [
              {
                "desc": "mouseButton (Trigger)",
                "hint": "Trigger is active if a specific mouse button is being pressed.",
                "lang": 0
              }
            ]
          }, // mouseButton
          {
            "name": "Object Modifier - mouseButtonUp (Trigger)",
            "tooltips": [
              {
                "desc": "mouseButtonUp (Trigger)",
                "hint": "Trigger is active if a specific mouse button was released.",
                "lang": 0
              }
            ]
          }, // mouseButtonUp
          {
            "name": "Object Modifier - mouseOver (Trigger)",
            "tooltips": [
              {
                "desc": "mouseOver (Trigger)",
                "hint": "Trigger is active if the mouse is over the object.",
                "lang": 0
              }
            ]
          }, // mouseOver
          {
            "name": "Object Modifier - mouseOverSignalModifier (Trigger)",
            "tooltips": [
              {
                "desc": "mouseOverSignalModifier (Trigger)",
                "hint": "Trigger is active if the mouse is over the object. If it is active, send a signal to a group of objects that must have a requireSignal modifier.",
                "lang": 0
              }
            ]
          } // mouseOverSignalModifier
        ],

        // Physics
        [
          {
            "name": "Object Modifier - bulletCollide (Trigger)",
            "tooltips": [
              {
                "desc": "bulletCollide (Trigger)",
                "hint": "Trigger is active if a player bullet is colliding with the object.",
                "lang": 0
              }
            ]
          }, // bulletCollide
          {
            "name": "Object Modifier - objectCollide (Trigger)",
            "tooltips": [
              {
                "desc": "objectCollide (Trigger)",
                "hint": "Trigger is active if the object is colliding with an object that has a matching tag and has a rigidbody modifier.",
                "lang": 0
              }
            ]
          }, // objectCollide

          {
            "name": "Object Modifier - setCollision (Action)",
            "tooltips": [
              {
                "desc": "setCollision (Action)",
                "hint": "Turns the collision on or off.",
                "lang": 0
              }
            ]
          }, // setCollision
          {
            "name": "Object Modifier - setCollisionOther (Action)",
            "tooltips": [
              {
                "desc": "setCollisionOther (Action)",
                "hint": "Turns the collision of a group of objects on or off.",
                "lang": 0
              }
            ]
          } // setCollisionOther
        ],

        // Enable
        [
          {
            "name": "Object Modifier - enableObject (Action)",
            "tooltips": [
              {
                "desc": "enableObject (Action)",
                "hint": "Enables the visual object.<br>Inactive condition: Disables.",
                "lang": 0
              }
            ]
          }, // enableObject
          {
            "name": "Object Modifier - enableObjectTree (Action)",
            "tooltips": [
              {
                "desc": "enableObjectTree (Action)",
                "hint": "Enables the entire parent tree.<br>Inactive condition: Disables.",
                "lang": 0
              }
            ]
          }, // enableObjectTree
          {
            "name": "Object Modifier - enableObjectOther (Action)",
            "tooltips": [
              {
                "desc": "enableObjectOther (Action)",
                "hint": "Enables the visuals of a group of objects. <br>Inactive condition: Disables.",
                "lang": 0
              }
            ]
          }, // enableObjectOther
          {
            "name": "Object Modifier - enableObjectTreeOther (Action)",
            "tooltips": [
              {
                "desc": "enableObjectTreeOther (Action)",
                "hint": "Enables the entire parent tree of a group of objects.<br>Inactive condition: Disables.",
                "lang": 0
              }
            ]
          }, // enableObjectTreeOther
          {
            "name": "Object Modifier - enableObjectGroup (Action)",
            "tooltips": [
              {
                "desc": "enableObjectGroup (Action)",
                "hint": "Enables multiple groups of objects depending on the state. If 'State' is set to 'All' then all groups will be enabled / disabled the same. If the state was set to one of the groups, that group will be selected as the enabled / disabled group and all other groups will have the opposite active state.",
                "lang": 0
              }
            ]
          }, // enableObjectGroup

          {
            "name": "Object Modifier - disableObject (Action)",
            "tooltips": [
              {
                "desc": "disableObject (Action)",
                "hint": "Disables the visual object.<br>Inactive condition: Enables.",
                "lang": 0
              }
            ]
          }, // disableObject
          {
            "name": "Object Modifier - disableObjectTree (Action)",
            "tooltips": [
              {
                "desc": "disableObjectTree (Action)",
                "hint": "Disables the entire parent tree.<br>Inactive condition: Enables.",
                "lang": 0
              }
            ]
          }, // disableObjectTree
          {
            "name": "Object Modifier - disableObjectOther (Action)",
            "tooltips": [
              {
                "desc": "disableObjectOther (Action)",
                "hint": "Disables the visuals of a group of objects. <br>Inactive condition: Enables.",
                "lang": 0
              }
            ]
          }, // disableObjectOther
          {
            "name": "Object Modifier - disableObjectTreeOther (Action)",
            "tooltips": [
              {
                "desc": "disableObjectTreeOther (Action)",
                "hint": "Disables the entire parent tree of a group of objects.<br>Inactive condition: Enables.",
                "lang": 0
              }
            ]
          }, // disableObjectTreeOther
          {
            "name": "Object Modifier - setBGActive (Action)",
            "tooltips": [
              {
                "desc": "setBGActive (Action)",
                "hint": "Sets a group of Background Objects active / inactive.",
                "lang": 0
              }
            ]
          } // setBGActive
        ],

        // JSON
        [
          {
            "name": "Object Modifier - saveFloat (Action)",
            "tooltips": [
              {
                "desc": "saveFloat (Action)",
                "hint": "Saves a floating point number (like 0.4324) to a JSON file that can be read later.",
                "lang": 0
              }
            ]
          }, // saveFloat
          {
            "name": "Object Modifier - saveString (Action)",
            "tooltips": [
              {
                "desc": "saveString (Action)",
                "hint": "Saves a string (like \"hi\") to a JSON file that can be read later.",
                "lang": 0
              }
            ]
          }, // saveString
          {
            "name": "Object Modifier - saveText (Action)",
            "tooltips": [
              {
                "desc": "saveText (Action)",
                "hint": "Saves the text of the text object to a JSON file that can be read later.",
                "lang": 0
              }
            ]
          }, // saveText
          {
            "name": "Object Modifier - saveVariable (Action)",
            "tooltips": [
              {
                "desc": "saveVariable (Action)",
                "hint": "Saves the variable of the object to a JSON file that can be read later.",
                "lang": 0
              }
            ]
          }, // saveVariable
          {
            "name": "Object Modifier - loadEquals (Trigger)",
            "tooltips": [
              {
                "desc": "loadEquals (Trigger)",
                "hint": "Trigger is active if a JSON value is equal to the modifier value. Supports text and numbers.",
                "lang": 0
              }
            ]
          }, // loadEquals
          {
            "name": "Object Modifier - loadLesserEquals (Trigger)",
            "tooltips": [
              {
                "desc": "loadLesserEquals (Trigger)",
                "hint": "Trigger is active if a JSON value is equal to or lesser than the modifier value. Supports only numbers.",
                "lang": 0
              }
            ]
          }, // loadLesserEquals
          {
            "name": "Object Modifier - loadGreaterEquals (Trigger)",
            "tooltips": [
              {
                "desc": "loadGreaterEquals (Trigger)",
                "hint": "Trigger is active if a JSON value is equal to or greater than the modifier value. Supports only numbers.",
                "lang": 0
              }
            ]
          }, // loadGreaterEquals
          {
            "name": "Object Modifier - loadLesser (Trigger)",
            "tooltips": [
              {
                "desc": "loadLesser (Trigger)",
                "hint": "Trigger is active if a JSON value is lesser than the modifier value. Supports only numbers.",
                "lang": 0
              }
            ]
          }, // loadLesser
          {
            "name": "Object Modifier - loadGreater (Trigger)",
            "tooltips": [
              {
                "desc": "loadGreater (Trigger)",
                "hint": "Trigger is active if a JSON value is greater than the modifier value. Supports only numbers.",
                "lang": 0
              }
            ]
          }, // loadGreater
          {
            "name": "Object Modifier - loadExists (Trigger)",
            "tooltips": [
              {
                "desc": "loadExists (Trigger)",
                "hint": "Trigger is active if a JSON value exists.",
                "lang": 0
              }
            ]
          } // loadExists
        ],

        // Events
        [
          {
            "name": "Object Modifier - eventOffset (Action)",
            "tooltips": [
              {
                "desc": "eventOffset (Action)",
                "hint": "Offsets an event keyframe value. (E.G. Move, Zoom, etc)<br>Val Index is the value index of an event to set (E.G. 0 = X, 1 = Y, etc)",
                "lang": 0
              }
            ]
          }, // eventOffset
          {
            "name": "Object Modifier - eventOffsetVariable (Action)",
            "tooltips": [
              {
                "desc": "eventOffsetVariable (Action)",
                "hint": "Offsets an event keyframe value by the object variable.",
                "lang": 0
              }
            ]
          }, // eventOffsetVariable
          {
            "name": "Object Modifier - eventOffsetMath (Action)",
            "tooltips": [
              {
                "desc": "eventOffsetMath (Action)",
                "hint": "Offsets an event keyframe value using a math equation.",
                "lang": 0
              }
            ]
          }, // eventOffsetMath
          {
            "name": "Object Modifier - eventOffsetAnimate (Action)",
            "tooltips": [
              {
                "desc": "eventOffsetAnimate (Action)",
                "hint": "Animates an event offset in real time.",
                "lang": 0
              }
            ]
          }, // eventOffsetAnimate
          {
            "name": "Object Modifier - eventOffsetCopyAxis (Action)",
            "tooltips": [
              {
                "desc": "eventOffsetCopyAxis (Action)",
                "hint": "Takes an axis of the object and applies it to an event offset.",
                "lang": 0
              }
            ]
          }, // eventOffsetCopyAxis
          {
            "name": "Object Modifier - vignetteTracksPlayer (Action)",
            "tooltips": [
              {
                "desc": "vignetteTracksPlayer (Action)",
                "hint": "Forces vignette to follow the player. Can be good for moody dynamic levels.",
                "lang": 0
              }
            ]
          }, // vignetteTracksPlayer
          {
            "name": "Object Modifier - lensTracksPlayer (Action)",
            "tooltips": [
              {
                "desc": "lensTracksPlayer (Action)",
                "hint": "Forces lens to follow the player.",
                "lang": 0
              }
            ]
          } // lensTracksPlayer
        ],

        // Color
        [
          {
            "name": "Object Modifier - getColor (Action)",
            "tooltips": [
              {
                "desc": "getColor (Action)",
                "hint": "Gets a color slot value and passes it to other modifiers.",
                "lang": 0
              }
            ]
          }, // getColor
          {
            "name": "Object Modifier - getColorSlotHexCode (Action)",
            "tooltips": [
              {
                "desc": "getColorSlotHexCode (Action)",
                "hint": "Gets a hex code from a color slot and passes it to other modifiers.",
                "lang": 0
              }
            ]
          }, // getColorSlotHexCode
          {
            "name": "Object Modifier - getFloatFromHexCode (Action)",
            "tooltips": [
              {
                "desc": "getFloatFromHexCode (Action)",
                "hint": "Gets a float from a hex code and passes it to other modifiers.",
                "lang": 0
              }
            ]
          }, // getFloatFromHexCode
          {
            "name": "Object Modifier - getHexCodeFromFloat (Action)",
            "tooltips": [
              {
                "desc": "getHexCodeFromFloat (Action)",
                "hint": "Gets a hex code from a float and passes it to other modifiers.",
                "lang": 0
              }
            ]
          }, // getHexCodeFromFloat
          {
            "name": "Object Modifier - getModifiedColor (Action)",
            "tooltips": [
              {
                "desc": "getModifiedColor (Action)",
                "hint": "Gets a hex color, modifies the HSV & opacity values and passes it to other modifiers.",
                "lang": 0
              }
            ]
          }, // getModifiedColor
          {
            "name": "Object Modifier - getMixedColors (Action)",
            "tooltips": [
              {
                "desc": "getMixedColors (Action)",
                "hint": "Gets a list of colors, mixes them and passes it to other modifiers.",
                "lang": 0
              }
            ]
          }, // getMixedColors
          {
            "name": "Object Modifier - getLerpColor (Action)",
            "tooltips": [
              {
                "desc": "getLerpColor (Action)",
                "hint": "Gets two colors, interpolates them and passes it to other modifiers.",
                "lang": 0
              }
            ]
          }, // getLerpColor
          {
            "name": "Object Modifier - getAddColor (Action)",
            "tooltips": [
              {
                "desc": "getAddColor (Action)",
                "hint": "Gets two colors, adds all their color channels and passes it to other modifiers.",
                "lang": 0
              }
            ]
          }, // getAddColor
          {
            "name": "Object Modifier - getVisualColor (Action)",
            "tooltips": [
              {
                "desc": "getVisualColor (Action)",
                "hint": "Gets the colors of the visual object and passes it to other modifiers.",
                "lang": 0
              }
            ]
          }, // getVisualColor
          {
            "name": "Object Modifier - getVisualColorRGBA (Action)",
            "tooltips": [
              {
                "desc": "getVisualColorRGBA (Action)",
                "hint": "Gets the RGBA color channels of the visual object and passes it to other modifiers.",
                "lang": 0
              }
            ]
          }, // getVisualColorRGBA
          {
            "name": "Object Modifier - getVisualOpacity (Action)",
            "tooltips": [
              {
                "desc": "getVisualColor (Action)",
                "hint": "Gets the opacity values of the visual object and passes it to other modifiers.",
                "lang": 0
              }
            ]
          }, // getVisualOpacity

          {
            "name": "Object Modifier - setTheme (Action)",
            "tooltips": [
              {
                "desc": "setTheme (Action)",
                "hint": "Sets a custom theme. Overwrites interpolation. Leave the ID value empty to remove the custom theme.",
                "lang": 0
              }
            ]
          }, // setTheme
          {
            "name": "Object Modifier - lerpTheme (Action)",
            "tooltips": [
              {
                "desc": "lerpTheme (Action)",
                "hint": "Interpolates between two theme and sets it to the custom theme. Leave either ID value empty to remove the custom theme.",
                "lang": 0
              }
            ]
          }, // lerpTheme

          {
            "name": "Object Modifier - addColor (Action)",
            "tooltips": [
              {
                "desc": "addColor (Action)",
                "hint": "Adds a color to the object.",
                "lang": 0
              }
            ]
          }, // addColor
          {
            "name": "Object Modifier - addColorOther (Action)",
            "tooltips": [
              {
                "desc": "addColorOther (Action)",
                "hint": "Adds a color to a group of objects.",
                "lang": 0
              }
            ]
          }, // addColorOther
          {
            "name": "Object Modifier - lerpColor (Action)",
            "tooltips": [
              {
                "desc": "lerpColor (Action)",
                "hint": "Lerps the current object's color and the set color.",
                "lang": 0
              }
            ]
          }, // lerpColor
          {
            "name": "Object Modifier - lerpColorOther (Action)",
            "tooltips": [
              {
                "desc": "lerpColorOther (Action)",
                "hint": "Lerps a group of object's color and the set color.",
                "lang": 0
              }
            ]
          }, // lerpColorOther
          {
            "name": "Object Modifier - addColorPlayerDistance (Action)",
            "tooltips": [
              {
                "desc": "addColorPlayerDistance (Action)",
                "hint": "Adds color to the object based on distance from a player.",
                "lang": 0
              }
            ]
          }, // addColorPlayerDistance
          {
            "name": "Object Modifier - lerpColorPlayerDistance (Action)",
            "tooltips": [
              {
                "desc": "lerpColorPlayerDistance (Action)",
                "hint": "Lerps the current object's color and the set color to the object based on distance from a player.",
                "lang": 0
              }
            ]
          }, // lerpColorPlayerDistance
          {
            "name": "Object Modifier - setColorHex (Action)",
            "tooltips": [
              {
                "desc": "setColorHex (Action)",
                "hint": "Overrides the objects' current color with a custom hex color. Good for having an object always be consistently one color, regardless of theme.",
                "lang": 0
              }
            ]
          }, // setColorHex
          {
            "name": "Object Modifier - setColorHexOther (Action)",
            "tooltips": [
              {
                "desc": "setColorHexOther (Action)",
                "hint": "Overrides a group of objects' current color with a custom hex color. Good for having an object always be consistently one color, regardless of theme.",
                "lang": 0
              }
            ]
          }, // setColorHexOther
          {
            "name": "Object Modifier - setColorRGBA (Action)",
            "tooltips": [
              {
                "desc": "setColorRGBA (Action)",
                "hint": "Overrides the objects' current color with a custom RGBA color. Good for having an object always be consistently one color, regardless of theme.",
                "lang": 0
              }
            ]
          }, // setColorRGBA
          {
            "name": "Object Modifier - setColorRGBAOther (Action)",
            "tooltips": [
              {
                "desc": "setColorRGBAOther (Action)",
                "hint": "Overrides a group of objects' current color with a custom RGBA color. Good for having an object always be consistently one color, regardless of theme.",
                "lang": 0
              }
            ]
          }, // setColorRGBAOther
          {
            "name": "Object Modifier - applyColorGroup (Action)",
            "tooltips": [
              {
                "desc": "applyColorGroup (Action)",
                "hint": "Applies the objects' own color to a group of objects and interpolates based on any of the objects' own sequences.",
                "lang": 0
              }
            ]
          }, // applyColorGroup
          {
            "name": "Object Modifier - setAlpha (Action)",
            "tooltips": [
              {
                "desc": "setAlpha (Action)",
                "hint": "Set the opacity of the object.",
                "lang": 0
              }
            ]
          }, // setAlpha
          {
            "name": "Object Modifier - setAlphaOther (Action)",
            "tooltips": [
              {
                "desc": "setAlphaOther (Action)",
                "hint": "Set the opacity of a group of objects.",
                "lang": 0
              }
            ]
          }, // setAlphaOther
          {
            "name": "Object Modifier - copyColor (Action)",
            "tooltips": [
              {
                "desc": "copyColor (Action)",
                "hint": "Copies the color of another object.",
                "lang": 0
              }
            ]
          }, // copyColor
          {
            "name": "Object Modifier - copyColorOther (Action)",
            "tooltips": [
              {
                "desc": "copyColorOther (Action)",
                "hint": "Applies the color of the object to a group of objects.",
                "lang": 0
              }
            ]
          }, // copyColorOther
          {
            "name": "Object Modifier - animateColorKF (Action)",
            "tooltips": [
              {
                "desc": "animateColorKF (Action)",
                "hint": "Animates the color of the object dynamically.",
                "lang": 0
              }
            ]
          }, // animateColorKF
          {
            "name": "Object Modifier - animateColorKFHex (Action)",
            "tooltips": [
              {
                "desc": "animateColorKFHex (Action)",
                "hint": "Animates the color of the object dynamically.",
                "lang": 0
              }
            ]
          } // animateColorKFHex
        ],

        // Shape
        [
          {
            "name": "Object Modifier - translateShape (Action)",
            "tooltips": [
              {
                "desc": "translateShape (Action)",
                "hint": "Moves, scales and rotates the mesh (shape) of the object around. Allows for custom gradient positioning.",
                "lang": 0
              }
            ]
          }, // translateShape
          {
            "name": "Object Modifier - setShape (Action)",
            "tooltips": [
              {
                "desc": "setShape (Action)",
                "hint": "Overrides the objects' current shape temporarily.",
                "lang": 0
              }
            ]
          }, // setShape
          {
            "name": "Object Modifier - setPolygonShape (Action)",
            "tooltips": [
              {
                "desc": "setPolygonShape (Action)",
                "hint": "Modifies the polygon shape settings. The object has to be the custom polygon shape.",
                "lang": 0
              }
            ]
          }, // setPolygonShape
          {
            "name": "Object Modifier - setPolygonShapeOther (Action)",
            "tooltips": [
              {
                "desc": "setPolygonShapeOther (Action)",
                "hint": "Modifies the polygon shape settings of an object group. The object has to be the custom polygon shape.",
                "lang": 0
              }
            ]
          }, // setPolygonShape
          {
            "name": "Object Modifier - setImage (Action)",
            "tooltips": [
              {
                "desc": "setImage (Action)",
                "hint": "Sets the image of the image object, if the object is an image object.",
                "lang": 0
              }
            ]
          }, // setImage
          {
            "name": "Object Modifier - setImageOther (Action)",
            "tooltips": [
              {
                "desc": "setImageOther (Action)",
                "hint": "Sets the image of a group of image objects, if the objects are an image object.",
                "lang": 0
              }
            ]
          }, // setImageOther
          {
            "name": "Object Modifier - setText (Action)",
            "tooltips": [
              {
                "desc": "setText (Action)",
                "hint": "Sets the text of the text object, if the object is a text object.",
                "lang": 0
              }
            ]
          }, // setText
          {
            "name": "Object Modifier - setTextOther (Action)",
            "tooltips": [
              {
                "desc": "setTextOther (Action)",
                "hint": "Sets the text of a group of text objects, if the objects are a text object.",
                "lang": 0
              }
            ]
          }, // setTextOther
          {
            "name": "Object Modifier - addText (Action)",
            "tooltips": [
              {
                "desc": "addText (Action)",
                "hint": "Add text to the end of the text object's current text, if the object is a text object.",
                "lang": 0
              }
            ]
          }, // addText
          {
            "name": "Object Modifier - addTextOther (Action)",
            "tooltips": [
              {
                "desc": "addTextOther (Action)",
                "hint": "Adds text to the end a group of text object's current text, if the objects are a text object.",
                "lang": 0
              }
            ]
          }, // addTextOther
          {
            "name": "Object Modifier - removeText (Action)",
            "tooltips": [
              {
                "desc": "removeText (Action)",
                "hint": "Removes text at a the end of the text object's text, if the object is a text object.",
                "lang": 0
              }
            ]
          }, // removeText
          {
            "name": "Object Modifier - removeTextOther (Action)",
            "tooltips": [
              {
                "desc": "removeTextOther (Action)",
                "hint": "Removes text at a the end of a group of text object's text, if the objects are a text object.",
                "lang": 0
              }
            ]
          }, // removeTextOther
          {
            "name": "Object Modifier - removeTextAt (Action)",
            "tooltips": [
              {
                "desc": "removeTextOther (Action)",
                "hint": "Removes text at a specific index of the text object's text, if the object is a text object.",
                "lang": 0
              }
            ]
          }, // removeTextAt
          {
            "name": "Object Modifier - removeTextOtherAt (Action)",
            "tooltips": [
              {
                "desc": "removeTextOtherAt (Action)",
                "hint": "Removes text at a specific index of a group of text object's text, if the objects are a text object.",
                "lang": 0
              }
            ]
          }, // removeTextOtherAt
          {
            "name": "Object Modifier - formatText (Action)",
            "tooltips": [
              {
                "desc": "formatText (Action)",
                "hint": "Forces custom text formatting onto the text object, if the object is one.",
                "lang": 0
              }
            ]
          }, // formatText
          {
            "name": "Object Modifier - textSequence (Action)",
            "tooltips": [
              {
                "desc": "textSequence (Action)",
                "hint": "Animates the text of the text object to be like a typewriter effect.",
                "lang": 0
              }
            ]
          }, // textSequence
          {
            "name": "Object Modifier - backgroundShape (Action)",
            "tooltips": [
              {
                "desc": "backgroundShape (Action)",
                "hint": "Swaps the 2D shape of the object to a 3D shape.",
                "lang": 0
              }
            ]
          }, // backgroundShape
          {
            "name": "Object Modifier - sphereShape (Action)",
            "tooltips": [
              {
                "desc": "sphereShape (Action)",
                "hint": "Changes the shape of the object to a sphere.",
                "lang": 0
              }
            ]
          } // sphereShape
        ],

        // Animation
        [
          {
            "name": "Object Modifier - getAxis (Action)",
            "tooltips": [
              {
                "desc": "getAxis (Action)",
                "hint": "Gets an objects' animation value and passes it to other modifiers.",
                "lang": 0
              }
            ]
          }, // getAxis
          {
            "name": "Object Modifier - getAxisMath (Action)",
            "tooltips": [
              {
                "desc": "getAxisMath (Action)",
                "hint": "Gets an objects' animation value, evaluates math and passes it to other modifiers.",
                "lang": 0
              }
            ]
          }, // getAxisMath

          {
            "name": "Object Modifier - animateObject (Action)",
            "tooltips": [
              {
                "desc": "animateObject (Action)",
                "hint": "Animates the object in real-time.",
                "lang": 0
              }
            ]
          }, // animateObject
          {
            "name": "Object Modifier - animateObjectOther (Action)",
            "tooltips": [
              {
                "desc": "animateObjectOther (Action)",
                "hint": "Animates a group of objects in real-time.",
                "lang": 0
              }
            ]
          }, // animateObjectOther
          {
            "name": "Object Modifier - animateSignal (Action)",
            "tooltips": [
              {
                "desc": "animateSignal (Action)",
                "hint": "Animates the object in real-time, then sends a signal to a group of objects that must have a requireSignal trigger when the animation is done.",
                "lang": 0
              }
            ]
          }, // animateSignal
          {
            "name": "Object Modifier - animateSignalOther (Action)",
            "tooltips": [
              {
                "desc": "animateSignalOther (Action)",
                "hint": "Animates a group of objects in real-time, then sends a signal to a group of objects that must have a requireSignal trigger when the animation is done.",
                "lang": 0
              }
            ]
          }, // animateSignalOther
          {
            "name": "Object Modifier - animateObjectMath (Action)",
            "tooltips": [
              {
                "desc": "animateObjectMath (Action)",
                "hint": "Animates the object in real-time.",
                "lang": 0
              }
            ]
          }, // animateObjectMath
          {
            "name": "Object Modifier - animateObjectMathOther (Action)",
            "tooltips": [
              {
                "desc": "animateObjectMathOther (Action)",
                "hint": "Animates a group of objects in real-time.",
                "lang": 0
              }
            ]
          }, // animateObjectMathOther
          {
            "name": "Object Modifier - animateSignalMath (Action)",
            "tooltips": [
              {
                "desc": "animateSignalMath (Action)",
                "hint": "Animates the object in real-time, then sends a signal to a group of objects that must have a requireSignal trigger when the animation is done.",
                "lang": 0
              }
            ]
          }, // animateSignalMath
          {
            "name": "Object Modifier - animateSignalMathOther (Action)",
            "tooltips": [
              {
                "desc": "animateSignalMathOther (Action)",
                "hint": "Animates a group of objects in real-time, then sends a signal to a group of objects that must have a requireSignal trigger when the animation is done.",
                "lang": 0
              }
            ]
          }, // animateSignalMathOther
          {
            "name": "Object Modifier - applyAnimation (Action)",
            "tooltips": [
              {
                "desc": "applyAnimation (Action)",
                "hint": "Applies an objects' animation to another.",
                "lang": 0
              }
            ]
          }, // applyAnimation
          {
            "name": "Object Modifier - applyAnimationFrom (Action)",
            "tooltips": [
              {
                "desc": "applyAnimationFrom (Action)",
                "hint": "Applies an objects' animation to another.",
                "lang": 0
              }
            ]
          }, // applyAnimationFrom
          {
            "name": "Object Modifier - applyAnimationTo (Action)",
            "tooltips": [
              {
                "desc": "applyAnimationTo (Action)",
                "hint": "Applies an objects' animation to another.",
                "lang": 0
              }
            ]
          }, // applyAnimationTo
          {
            "name": "Object Modifier - applyAnimationMath (Action)",
            "tooltips": [
              {
                "desc": "applyAnimationMath (Action)",
                "hint": "Applies an objects' animation to another.",
                "lang": 0
              }
            ]
          }, // applyAnimationMath
          {
            "name": "Object Modifier - applyAnimationFromMath (Action)",
            "tooltips": [
              {
                "desc": "applyAnimationFromMath (Action)",
                "hint": "Applies an objects' animation to another.",
                "lang": 0
              }
            ]
          }, // applyAnimationFromMath
          {
            "name": "Object Modifier - applyAnimationToMath (Action)",
            "tooltips": [
              {
                "desc": "applyAnimationToMath (Action)",
                "hint": "Applies an objects' animation to another.",
                "lang": 0
              }
            ]
          }, // applyAnimationToMath
          {
            "name": "Object Modifier - copyAxis (Action)",
            "tooltips": [
              {
                "desc": "copyAxis (Action)",
                "hint": "Copies the axis (E.G. position X, scale Y, etc) of another object and applies it to an axis of the current object with set limits and offsets. Basically, works like secondary parenting.",
                "lang": 0
              }
            ]
          }, // copyAxis
          {
            "name": "Object Modifier - copyAxisMath (Action)",
            "tooltips": [
              {
                "desc": "copyAxisMath (Action)",
                "hint": "Copies the axis (E.G. position X, scale Y, etc) of another object and applies it to an axis of the current object with custom math evaluation (axis is the value being used and var is the object variable). Basically, works like secondary parenting.",
                "lang": 0
              }
            ]
          }, // copyAxisMath
          {
            "name": "Object Modifier - copyAxisGroup (Action)",
            "tooltips": [
              {
                "desc": "copyAxisGroup (Action)",
                "hint": "Copies the axis (E.G. position X, scale Y, etc) of a group of objects and applies it to an axis of the current object with custom math evaluation. Basically, works like secondary parenting.",
                "lang": 0
              }
            ]
          }, // copyAxisGroup
          {
            "name": "Object Modifier - copyPlayerAxis (Action)",
            "tooltips": [
              {
                "desc": "copyAxisGroup (Action)",
                "hint": "Copies the axis of a player and applies it to itself.",
                "lang": 0
              }
            ]
          }, // copyPlayerAxis
          {
            "name": "Object Modifier - legacyTail (Action)",
            "tooltips": [
              {
                "desc": "legacyTail (Action)",
                "hint": "Makes a chain of objects act like the Legacy player tail.",
                "lang": 0
              }
            ]
          }, // legacyTail
          {
            "name": "Object Modifier - gravity (Action)",
            "tooltips": [
              {
                "desc": "gravity (Action)",
                "hint": "Forces the object to have an attempt at gravity.",
                "lang": 0
              }
            ]
          }, // gravity
          {
            "name": "Object Modifier - gravityOther (Action)",
            "tooltips": [
              {
                "desc": "gravityOther (Action)",
                "hint": "Forces a group of objects to have an attempt at gravity.",
                "lang": 0
              }
            ]
          }, // gravityOther

          {
            "name": "Object Modifier - axisEquals (Trigger)",
            "tooltips": [
              {
                "desc": "axisEquals (Trigger)",
                "hint": "Trigger is active if an object's axis is equal to the modifier value.",
                "lang": 0
              }
            ]
          }, // axisEquals
          {
            "name": "Object Modifier - axisLesserEquals (Trigger)",
            "tooltips": [
              {
                "desc": "axisLesserEquals (Trigger)",
                "hint": "Trigger is active if an object's axis is equal to or lesser than the modifier value.",
                "lang": 0
              }
            ]
          }, // axisLesserEquals
          {
            "name": "Object Modifier - axisGreaterEquals (Trigger)",
            "tooltips": [
              {
                "desc": "axisGreaterEquals (Trigger)",
                "hint": "Trigger is active if an object's axis is equal to or greater than the modifier value.",
                "lang": 0
              }
            ]
          }, // axisGreaterEquals
          {
            "name": "Object Modifier - axisLesser (Trigger)",
            "tooltips": [
              {
                "desc": "axisLesser (Trigger)",
                "hint": "Trigger is active if an object's axis is lesser than the modifier value.",
                "lang": 0
              }
            ]
          }, // axisLesser
          {
            "name": "Object Modifier - axisGreater (Trigger)",
            "tooltips": [
              {
                "desc": "axisGreater (Trigger)",
                "hint": "Trigger is active if an object's axis is greater than the modifier value.",
                "lang": 0
              }
            ]
          } // axisGreater
        ],

        // Prefab
        [
          {
            "name": "Object Modifier - spawnPrefab (Action)",
            "tooltips": [
              {
                "desc": "spawnPrefab (Action)",
                "hint": "Spawns a prefab from the internal prefabs list with custom offsets.<br>Inactive condition: Prefab that was spawned is killed. (Subject to change)",
                "lang": 0
              }
            ]
          }, // spawnPrefab
          {
            "name": "Object Modifier - spawnPrefabOffset (Action)",
            "tooltips": [
              {
                "desc": "spawnPrefabOffset (Action)",
                "hint": "Spawns a prefab from the internal prefabs list with custom offsets and set to the objects position / scale / rotation.<br>Inactive condition: Prefab that was spawned is killed. (Subject to change)",
                "lang": 0
              }
            ]
          }, // spawnPrefabOffset
          {
            "name": "Object Modifier - spawnPrefabOffsetOther (Action)",
            "tooltips": [
              {
                "desc": "spawnPrefabOffsetOther (Action)",
                "hint": "Spawns a prefab from the internal prefabs list with custom offsets and set to the objects position / scale / rotation.<br>Inactive condition: Prefab that was spawned is killed. (Subject to change)",
                "lang": 0
              }
            ]
          }, // spawnPrefabOffsetOther
          {
            "name": "Object Modifier - spawnPrefabCopy (Action)",
            "tooltips": [
              {
                "desc": "spawnPrefabCopy (Action)",
                "hint": "Spawns a prefab from the internal prefabs list and copies the data of another prefab object.",
                "lang": 0
              }
            ]
          }, // spawnPrefabCopy
          {
            "name": "Object Modifier - spawnMultiPrefab (Action)",
            "tooltips": [
              {
                "desc": "spawnMultiPrefab (Action)",
                "hint": "Spawns multiple prefabs from the internal prefabs list with custom offsets.",
                "lang": 0
              }
            ]
          }, // spawnMultiPrefab
          {
            "name": "Object Modifier - spawnMultiPrefabOffset (Action)",
            "tooltips": [
              {
                "desc": "spawnMultiPrefabOffset (Action)",
                "hint": "Spawns multiple prefabs from the internal prefabs list with custom offsets and set to the objects position / scale / rotation.",
                "lang": 0
              }
            ]
          }, // spawnMultiPrefabOffset
          {
            "name": "Object Modifier - spawnMultiPrefabOffsetOther (Action)",
            "tooltips": [
              {
                "desc": "spawnMultiPrefabOffsetOther (Action)",
                "hint": "Spawns multiple prefabs from the internal prefabs list with custom offsets and set to the objects position / scale / rotation.",
                "lang": 0
              }
            ]
          }, // spawnMultiPrefabOffsetOther
          {
            "name": "Object Modifier - spawnMultiPrefabCopy (Action)",
            "tooltips": [
              {
                "desc": "spawnMultiPrefabCopy (Action)",
                "hint": "Spawns multiple prefabs from the internal prefabs list and copies the data of another prefab object.",
                "lang": 0
              }
            ]
          }, // spawnMultiPrefabCopy
          {
            "name": "Object Modifier - clearSpawnedPrefabs (Action)",
            "tooltips": [
              {
                "desc": "clearSpawnedPrefabs (Action)",
                "hint": "Finds a group of objects and clears all prefab objects spawned from their modifiers.",
                "lang": 0
              }
            ]
          }, // clearSpawnedPrefabs
          {
            "name": "Object Modifier - setPrefabTime (Action)",
            "tooltips": [
              {
                "desc": "setPrefabTime (Action)",
                "hint": "Sets the time of the Prefab Objects' runtime.",
                "lang": 0
              }
            ]
          }, // setPrefabTime
          {
            "name": "Object Modifier - enablePrefab (Action)",
            "tooltips": [
              {
                "desc": "enablePrefab (Action)",
                "hint": "Sets the active state of the Prefab Object that spawned this object.",
                "lang": 0
              }
            ]
          }, // enablePrefab
          {
            "name": "Object Modifier - updatePrefab (Action)",
            "tooltips": [
              {
                "desc": "updatePrefab (Action)",
                "hint": "Updates the Prefab Object that spawned this object.",
                "lang": 0
              }
            ]
          } // updatePrefab
        ],

        // Updates
        [
          {
            "name": "Object Modifier - updateObjects (Action)",
            "tooltips": [
              {
                "desc": "updateObjects (Action)",
                "hint": "Reinitializes the object engine.",
                "lang": 0
              }
            ]
          }, // updateObjects
          {
            "name": "Object Modifier - reinitLevel (Action)",
            "tooltips": [
              {
                "desc": "reinitLevel (Action)",
                "hint": "Reinitializes the level engine.",
                "lang": 0
              }
            ]
          }, // reinitLevel
          {
            "name": "Object Modifier - updateObject (Action)",
            "tooltips": [
              {
                "desc": "updateObject (Action)",
                "hint": "Reinitializes the object.",
                "lang": 0
              }
            ]
          }, // updateObject
          {
            "name": "Object Modifier - updateObjectOther (Action)",
            "tooltips": [
              {
                "desc": "updateObjectOther (Action)",
                "hint": "Reinitializes a group object of objects.",
                "lang": 0
              }
            ]
          }, // updateObjectOther
          {
            "name": "Object Modifier - setParent (Action)",
            "tooltips": [
              {
                "desc": "setParent (Action)",
                "hint": "Temporarily sets the parent of the object until the object is updated or the level is reloaded. Set the Object Group field to empty if you want it to remove the parent instead.",
                "lang": 0
              }
            ]
          }, // setParent
          {
            "name": "Object Modifier - setParentOther (Action)",
            "tooltips": [
              {
                "desc": "setParentOther (Action)",
                "hint": "Temporarily sets the parent of a group objects until the objects are updated or the level is reloaded. Leave \"Parent Group To\" empty to set the parent to this.",
                "lang": 0
              }
            ]
          }, // setParentOther
          {
            "name": "Object Modifier - detachParent (Action)",
            "tooltips": [
              {
                "desc": "detachParent (Action)",
                "hint": "Temporarily desyncs the object and its children from the parent. It can be resynced via turning the toggle off.",
                "lang": 0
              }
            ]
          }, // detachParent
          {
            "name": "Object Modifier - detachParentOther (Action)",
            "tooltips": [
              {
                "desc": "detachParentOther (Action)",
                "hint": "Temporarily desyncs a group of objects and their children from their parents. They can be resynced via turning the toggle off.",
                "lang": 0
              }
            ]
          }, // detachParentOther
          {
            "name": "Object Modifier - setSeed (Action)",
            "tooltips": [
              {
                "desc": "setSeed (Action)",
                "hint": "Sets the current randomization seed and updates all animations accordingly.",
                "lang": 0
              }
            ]
          }, // setSeed

          {
            "name": "Object Modifier - objectActive (Trigger)",
            "tooltips": [
              {
                "desc": "objectActive (Trigger)",
                "hint": "Trigger is active if the objects' active state is true.",
                "lang": 0
              }
            ]
          }, // objectActive
          {
            "name": "Object Modifier - objectCustomActive (Trigger)",
            "tooltips": [
              {
                "desc": "objectCustomActive (Trigger)",
                "hint": "Trigger is active if the objects' custom active state is true.",
                "lang": 0
              }
            ]
          }, // objectCustomActive
          {
            "name": "Object Modifier - objectAlive (Trigger)",
            "tooltips": [
              {
                "desc": "objectAlive (Trigger)",
                "hint": "Trigger is active if any of the group of objects are alive.",
                "lang": 0
              }
            ]
          }, // objectAlive
          {
            "name": "Object Modifier - objectSpawned (Trigger)",
            "tooltips": [
              {
                "desc": "objectSpawned (Trigger)",
                "hint": "Trigger is active if any of the group of objects was spawned.",
                "lang": 0
              }
            ]
          } // objectSpawned
        ],

        // Checkpoint / Marker
        [
          {
            "name": "Object Modifier - createCheckpoint (Action)",
            "tooltips": [
              {
                "desc": "createCheckpoint (Action)",
                "hint": "Creates a new checkpoint for players to respawn at when they all die. This modifier implements experimental features that haven't been added to the Checkpoint Editor yet, so use with caution.",
                "lang": 0
              }
            ]
          }, // createCheckpoint
          {
            "name": "Object Modifier - resetCheckpoint (Action)",
            "tooltips": [
              {
                "desc": "resetCheckpoint (Action)",
                "hint": "Resets the currently active checkpoint either to the previous checkpoint, or the start checkpoint.",
                "lang": 0
              }
            ]
          }, // resetCheckpoint
          {
            "name": "Object Modifier - onCheckpoint (Trigger)",
            "tooltips": [
              {
                "desc": "onCheckpoint (Action)",
                "hint": "Trigger is active if a matching checkpoint has been reached.",
                "lang": 0
              }
            ]
          }, // onCheckpoint
          {
            "name": "Object Modifier - onMarker (Trigger)",
            "tooltips": [
              {
                "desc": "onMarker (Action)",
                "hint": "Trigger is active if a matching marker has been reached.",
                "lang": 0
              }
            ]
          } // onMarker
        ],

        // Interfaces
        [
          {
            "name": "Object Modifier - loadInterface (Action)",
            "tooltips": [
              {
                "desc": "loadInterface (Action)",
                "hint": "Loads a custom interface from the level folder.",
                "lang": 0
              }
            ]
          }, // loadInterface
          {
            "name": "Object Modifier - pauseLevel (Action)",
            "tooltips": [
              {
                "desc": "pauseLevel (Action)",
                "hint": "Pauses the game and opens the pause menu.",
                "lang": 0
              }
            ]
          }, // pauseLevel
          {
            "name": "Object Modifier - exitInterface (Action)",
            "tooltips": [
              {
                "desc": "exitInterface (Action)",
                "hint": "Exits the currently open interface.",
                "lang": 0
              }
            ]
          }, // exitInterface
          {
            "name": "Object Modifier - quitToMenu (Action)",
            "tooltips": [
              {
                "desc": "quitToMenu (Action)",
                "hint": "Quits the player to the main menu. Does not save player progress, so be aware of that.",
                "lang": 0
              }
            ]
          }, // quitToMenu
          {
            "name": "Object Modifier - quitToArcade (Action)",
            "tooltips": [
              {
                "desc": "quitToArcade (Action)",
                "hint": "Quits the player to the arcade. Does not save player progress, so be aware of that.",
                "lang": 0
              }
            ]
          } // quitToArcade
        ],

        // Application
        [
          {
            "name": "Object Modifier - setWindowTitle (Action)",
            "tooltips": [
              {
                "desc": "setWindowTitle (Action)",
                "hint": "Sets the title of the Project Arrhythmia application.",
                "lang": 0
              }
            ]
          }, // setWindowTitle
          {
            "name": "Object Modifier - setDiscordStatus (Action)",
            "tooltips": [
              {
                "desc": "setDiscordStatus (Action)",
                "hint": "Sets the current status to show in Discord.",
                "lang": 0
              }
            ]
          }, // setDiscordStatus
          {
            "name": "Object Modifier - editorNotify (Action)",
            "tooltips": [
              {
                "desc": "editorNotify (Action)",
                "hint": "Shows an editor notification. Good for debugging.",
                "lang": 0
              }
            ]
          }, // editorNotify
          {
            "name": "Object Modifier - isFullscreen (Trigger)",
            "tooltips": [
              {
                "desc": "isFullscreen (Trigger)",
                "hint": "Trigger is active if fullscreen is on.",
                "lang": 0
              }
            ]
          } // isFullscreen
        ],

        // Modifier
        [
          {
            "name": "Object Modifier - signalModifier (Action)",
            "tooltips": [
              {
                "desc": "signalModifier (Action)",
                "hint": "Sends a signal to a group of objects that must contain a requireSignal trigger modifier.",
                "lang": 0
              }
            ]
          }, // signalModifier
          {
            "name": "Object Modifier - callModifierBlock (Action)",
            "tooltips": [
              {
                "desc": "callModifierBlock (Action)",
                "hint": "Runs a levels' modifier block. Good for compacting and reusing code.",
                "lang": 0
              }
            ]
          }, // callModifierBlock
          {
            "name": "Object Modifier - callModifierBlockTrigger (Action)",
            "tooltips": [
              {
                "desc": "callModifierBlockTrigger (Action)",
                "hint": "Trigger is active if the modifier block it runs returns true.",
                "lang": 0
              }
            ]
          }, // callModifierBlockTrigger
          {
            "name": "Object Modifier - getTag (Action)",
            "tooltips": [
              {
                "desc": "getTag (Action)",
                "hint": "Gets a tag at an index from the object and passes it to other modifiers.",
                "lang": 0
              }
            ]
          }, // getTag
          {
            "name": "Object Modifier - containsTag (Trigger)",
            "tooltips": [
              {
                "desc": "containsTag (Trigger)",
                "hint": "Trigger is active if the object contains the specific tag.",
                "lang": 0
              }
            ]
          }, // containsTag
          {
            "name": "Object Modifier - requireSignal (Trigger)",
            "tooltips": [
              {
                "desc": "requireSignal (Trigger)",
                "hint": "Trigger is active if the modifier has been activated by a signalModifier modifier.",
                "lang": 0
              }
            ]
          } // requireSignal
        ],

        // Random
        [
          {
            "name": "Object Modifier - randomGreater (Trigger)",
            "tooltips": [
              {
                "desc": "randomGreater (Trigger)",
                "hint": "Trigger is active if random is greater than the modifier value.",
                "lang": 0
              }
            ]
          }, // randomGreater
          {
            "name": "Object Modifier - randomLesser (Trigger)",
            "tooltips": [
              {
                "desc": "randomLesser (Trigger)",
                "hint": "Trigger is active if random is lesser than the modifier value.",
                "lang": 0
              }
            ]
          }, // randomLesser
          {
            "name": "Object Modifier - randomEquals (Trigger)",
            "tooltips": [
              {
                "desc": "randomEquals (Trigger)",
                "hint": "Trigger is active if random is equal to the modifier value.",
                "lang": 0
              }
            ]
          } // randomEquals
        ],

        // Math
        [
          {
            "name": "Object Modifier - getMath (Action)",
            "tooltips": [
              {
                "desc": "getMath (Action)",
                "hint": "Gets a math evaluation and passes it to other modifiers.",
                "lang": 0
              }
            ]
          }, // getMath

          {
            "name": "Object Modifier - mathEquals (Trigger)",
            "tooltips": [
              {
                "desc": "mathEquals (Trigger)",
                "hint": "Trigger is active if the first math equation is equal to the second math equation.",
                "lang": 0
              }
            ]
          }, // mathEquals
          {
            "name": "Object Modifier - mathLesserEquals (Trigger)",
            "tooltips": [
              {
                "desc": "mathLesserEquals (Trigger)",
                "hint": "Trigger is active if the first math equation is equal to or lesser than the second math equation.",
                "lang": 0
              }
            ]
          }, // mathLesserEquals
          {
            "name": "Object Modifier - mathGreaterEquals (Trigger)",
            "tooltips": [
              {
                "desc": "mathGreaterEquals (Trigger)",
                "hint": "Trigger is active if the first math equation is equal to or greater than the second math equation.",
                "lang": 0
              }
            ]
          }, // mathGreaterEquals
          {
            "name": "Object Modifier - mathLesser (Trigger)",
            "tooltips": [
              {
                "desc": "mathLesser (Trigger)",
                "hint": "Trigger is active if the first math equation is lesser than the second math equation.",
                "lang": 0
              }
            ]
          }, // mathLesser
          {
            "name": "Object Modifier - mathGreater (Trigger)",
            "tooltips": [
              {
                "desc": "mathGreater (Trigger)",
                "hint": "Trigger is active if the first math equation is greater than the second math equation.",
                "lang": 0
              }
            ]
          } // mathGreater
        ],

        // Real Time
        [
          {
            "name": "Object Modifier - realTimeEquals (Trigger)",
            "tooltips": [
              {
                "desc": "realTimeEquals (Trigger)",
                "hint": "Trigger is active if the users' real date time is equal to the value.",
                "lang": 0
              }
            ]
          }, // realTimeEquals
          {
            "name": "Object Modifier - realTimeLesserEquals (Trigger)",
            "tooltips": [
              {
                "desc": "realTimeLesserEquals (Trigger)",
                "hint": "Trigger is active if the users' real date time is equal to or lesser than the value.",
                "lang": 0
              }
            ]
          }, // realTimeLesserEquals
          {
            "name": "Object Modifier - realTimeGreaterEquals (Trigger)",
            "tooltips": [
              {
                "desc": "realTimeGreaterEquals (Trigger)",
                "hint": "Trigger is active if the users' real date time is equal to or greater than the value.",
                "lang": 0
              }
            ]
          }, // realTimeGreaterEquals
          {
            "name": "Object Modifier - realTimeLesser (Trigger)",
            "tooltips": [
              {
                "desc": "realTimeLesser (Trigger)",
                "hint": "Trigger is active if the users' real date time is lesser than the value.",
                "lang": 0
              }
            ]
          }, // realTimeLesser
          {
            "name": "Object Modifier - realTimeGreater (Trigger)",
            "tooltips": [
              {
                "desc": "realTimeGreater (Trigger)",
                "hint": "Trigger is active if the users' real date time is greater than the value.",
                "lang": 0
              }
            ]
          } // realTimeGreater
        ],

        // Config
        [
          {
            "name": "Object Modifier - configLDM (Trigger)",
            "tooltips": [
              {
                "desc": "configLDM (Trigger)",
                "hint": "Trigger is active if the user's LDM (Low Detail Mode) config is on. LDM can be found under Config Manager > Core > Level.",
                "lang": 0
              }
            ]
          }, // configLDM
          {
            "name": "Object Modifier - usernameEquals (Trigger)",
            "tooltips": [
              {
                "desc": "usernameEquals (Trigger)",
                "hint": "Trigger is active if the current player's username is equal to the modifier value you set.",
                "lang": 0
              }
            ]
          }, // usernameEquals
          {
            "name": "Object Modifier - languageEquals (Trigger)",
            "tooltips": [
              {
                "desc": "languageEquals (Trigger)",
                "hint": "Trigger is active if the current player's language is equal to the modifier value you set. Language can be found under Config Manager > Core > Settings.",
                "lang": 0
              }
            ]
          }, // languageEquals
          {
            "name": "Object Modifier - configShowEffects (Trigger)",
            "tooltips": [
              {
                "desc": "configShowEffects (Trigger)",
                "hint": "Trigger is active if the user's Show Effects config is on. Show Effects can be found under Config Manager > Events > General.",
                "lang": 0
              }
            ]
          }, // configShowEffects
          {
            "name": "Object Modifier - configShowPlayerGUI (Trigger)",
            "tooltips": [
              {
                "desc": "configShowPlayerGUI (Trigger)",
                "hint": "Trigger is active if the user's Player & GUI Active config is on. Player & GUI Active can be found under Config Manager > Players > Game.",
                "lang": 0
              }
            ]
          }, // configShowPlayerGUI
          {
            "name": "Object Modifier - configShowIntro (Trigger)",
            "tooltips": [
              {
                "desc": "configShowIntro (Trigger)",
                "hint": "Trigger is active if the user's Show Intro config is on. Show Intro Can be found under Config Manager > Players > Game.",
                "lang": 0
              }
            ]
          } // configShowIntro
        ]
      ]
    ],

    // Misc
    [
      {
        "name": "Hex Color Field",
        "tooltips": [
          {
            "desc": "Set a custom color.",
            "hint": "Right click to open the Color Picker.",
            "lang": 0
          }
        ]
      } // Hex Color Field
    ]
  ]
}